sc_rollup_commitment_of_rollup_node_messages_reset.out

./tezos-client --wait none originate sc rollup from '[PUBLIC_KEY_HASH]' of kind arith of type unit booting with  --burn-cap 9999999
Node is bootstrapped.
Estimated gas: 1800.796 units (will add 100 for safety)
Estimated storage: 6540 bytes added (will add 20 for safety)
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000428
    Expected counter: 1
    Gas limit: 1901
    Storage limit: 6560 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000428
      payload fees(the block proposer) ....... +ꜩ0.000428
    Originate smart contract rollup of kind arith and type unit with boot sector ''
      This smart contract rollup origination was successfully applied
      Consumed gas: 1800.796
      Storage size: 6540 bytes
      Address: [SC_ROLLUP_HASH]
      Balance updates:
        [PUBLIC_KEY_HASH] ... -ꜩ1.635
        storage fees ........................... +ꜩ1.635


./tezos-client rpc get '/chains/main/blocks/head/context/sc_rollup/[SC_ROLLUP_HASH]/initial_level'
2

./tezos-client rpc get /chains/main/blocks/head/context/constants
{ "proof_of_work_nonce_size": 8, "nonce_length": 32,
  "max_anon_ops_per_block": 132, "max_operation_data_length": 32768,
  "max_proposals_per_delegate": 20, "max_micheline_node_count": 50000,
  "max_micheline_bytes_limit": 50000,
  "max_allowed_global_constants_depth": 10000, "cache_layout_size": 3,
  "michelson_maximum_type_size": 2001, "preserved_cycles": 2,
  "blocks_per_cycle": 8, "blocks_per_commitment": 4,
  "blocks_per_stake_snapshot": 4, "cycles_per_voting_period": 8,
  "hard_gas_limit_per_operation": "1040000",
  "hard_gas_limit_per_block": "5200000", "proof_of_work_threshold": "-1",
  "tokens_per_roll": "6000000000", "seed_nonce_revelation_tip": "125000",
  "origination_size": 257, "baking_reward_fixed_portion": "333333",
  "baking_reward_bonus_per_slot": "3921",
  "endorsing_reward_per_slot": "2604", "cost_per_byte": "250",
  "hard_storage_limit_per_operation": "60000", "quorum_min": 2000,
  "quorum_max": 7000, "min_proposal_quorum": 500,
  "liquidity_baking_subsidy": "2500000",
  "liquidity_baking_sunset_level": 128,
  "liquidity_baking_toggle_ema_threshold": 1000000000,
  "max_operations_time_to_live": 120, "minimal_block_delay": "1",
  "delay_increment_per_round": "1", "consensus_committee_size": 256,
  "consensus_threshold": 0,
  "minimal_participation_ratio": { "numerator": 2, "denominator": 3 },
  "max_slashing_period": 2, "frozen_deposits_percentage": 5,
  "double_baking_punishment": "640000000",
  "max_blocks_per_endorsement_rights_request": 128,
  "ratio_of_frozen_deposits_slashed_per_double_endorsement":
    { "numerator": 1, "denominator": 2 }, "cache_script_size": 100000000,
  "cache_stake_distribution_cycles": 8, "cache_sampler_state_cycles": 8,
  "tx_rollup_enable": true, "tx_rollup_origination_size": 4000,
  "tx_rollup_hard_size_limit_per_inbox": 500000,
  "tx_rollup_hard_size_limit_per_message": 5000,
  "tx_rollup_max_withdrawals_per_batch": 15,
  "tx_rollup_commitment_bond": "10000000000",
  "tx_rollup_finality_period": 40000, "tx_rollup_withdraw_period": 40000,
  "tx_rollup_max_inboxes_count": 40100,
  "tx_rollup_max_messages_per_inbox": 1010,
  "tx_rollup_max_commitments_count": 80100,
  "tx_rollup_cost_per_byte_ema_factor": 120,
  "tx_rollup_max_ticket_payload_size": 2048,
  "tx_rollup_rejection_max_proof_size": 30000,
  "tx_rollup_sunset_level": 3473409, "sc_rollup_enable": true,
  "sc_rollup_origination_size": 6314,
  "sc_rollup_challenge_window_in_blocks": 20160,
  "sc_rollup_max_available_messages": 1000000,
  "sc_rollup_stake_amount_in_mutez": 32000000,
  "sc_rollup_commitment_period_in_blocks": 30,
  "sc_rollup_commitment_storage_size_in_bytes": 84,
  "sc_rollup_max_lookahead_in_blocks": 30000,
  "sc_rollup_max_active_outbox_levels": 20160,
  "sc_rollup_max_outbox_messages_per_level": 100 }

./tezos-client --wait none send sc rollup message 'text:["CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1651.661 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000457
    Expected counter: 2
    Gas limit: 1752
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000457
      payload fees(the block proposer) ....... +ꜩ0.000457
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1651.789
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 3
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 1
         nb_messages_in_commitment_period = 1
         starting_level_of_current_commitment_period = 2
         message_counter = 1
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 1
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1652.448 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000469
    Expected counter: 3
    Gas limit: 1753
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000469
      payload fees(the block proposer) ....... +ꜩ0.000469
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1652.576
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 4
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 3
         nb_messages_in_commitment_period = 3
         starting_level_of_current_commitment_period = 2
         message_counter = 2
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 2
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1653.220 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000481
    Expected counter: 4
    Gas limit: 1754
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000481
      payload fees(the block proposer) ....... +ꜩ0.000481
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1653.220
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 5
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 6
         nb_messages_in_commitment_period = 6
         starting_level_of_current_commitment_period = 2
         message_counter = 3
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 3
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1653.785 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000493
    Expected counter: 5
    Gas limit: 1754
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000493
      payload fees(the block proposer) ....... +ꜩ0.000493
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1653.913
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 6
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 10
         nb_messages_in_commitment_period = 10
         starting_level_of_current_commitment_period = 2
         message_counter = 4
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 4
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1654.557 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000505
    Expected counter: 6
    Gas limit: 1755
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000505
      payload fees(the block proposer) ....... +ꜩ0.000505
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1654.557
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 7
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 15
         nb_messages_in_commitment_period = 15
         starting_level_of_current_commitment_period = 2
         message_counter = 5
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 5
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1655.122 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000517
    Expected counter: 7
    Gas limit: 1756
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000517
      payload fees(the block proposer) ....... +ꜩ0.000517
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1655.122
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 8
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 21
         nb_messages_in_commitment_period = 21
         starting_level_of_current_commitment_period = 2
         message_counter = 6
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 6
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1655.687 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000529
    Expected counter: 8
    Gas limit: 1756
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000529
      payload fees(the block proposer) ....... +ꜩ0.000529
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1655.687
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 9
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 28
         nb_messages_in_commitment_period = 28
         starting_level_of_current_commitment_period = 2
         message_counter = 7
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 7
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1656.252 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000541
    Expected counter: 9
    Gas limit: 1757
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000541
      payload fees(the block proposer) ....... +ꜩ0.000541
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1656.380
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 10
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 36
         nb_messages_in_commitment_period = 36
         starting_level_of_current_commitment_period = 2
         message_counter = 8
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 8
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1657.024 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000553
    Expected counter: 10
    Gas limit: 1758
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000553
      payload fees(the block proposer) ....... +ꜩ0.000553
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1657.024
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 11
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 45
         nb_messages_in_commitment_period = 45
         starting_level_of_current_commitment_period = 2
         message_counter = 9
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 9
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1657.589 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000565
    Expected counter: 11
    Gas limit: 1758
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000565
      payload fees(the block proposer) ....... +ꜩ0.000565
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1657.589
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 12
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 55
         nb_messages_in_commitment_period = 55
         starting_level_of_current_commitment_period = 2
         message_counter = 10
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 10
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1658.154 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000577
    Expected counter: 12
    Gas limit: 1759
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000577
      payload fees(the block proposer) ....... +ꜩ0.000577
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1658.154
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 13
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 66
         nb_messages_in_commitment_period = 66
         starting_level_of_current_commitment_period = 2
         message_counter = 11
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 11
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1658.719 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000589
    Expected counter: 13
    Gas limit: 1759
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000589
      payload fees(the block proposer) ....... +ꜩ0.000589
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1658.719
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 14
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 78
         nb_messages_in_commitment_period = 78
         starting_level_of_current_commitment_period = 2
         message_counter = 12
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 12
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1659.284 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000601
    Expected counter: 14
    Gas limit: 1760
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000601
      payload fees(the block proposer) ....... +ꜩ0.000601
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1659.284
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 15
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 91
         nb_messages_in_commitment_period = 91
         starting_level_of_current_commitment_period = 2
         message_counter = 13
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 13
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1659.849 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000613
    Expected counter: 15
    Gas limit: 1760
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000613
      payload fees(the block proposer) ....... +ꜩ0.000613
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1659.849
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 16
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 105
         nb_messages_in_commitment_period = 105
         starting_level_of_current_commitment_period = 2
         message_counter = 14
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 14
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1660.414 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000626
    Expected counter: 16
    Gas limit: 1761
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000626
      payload fees(the block proposer) ....... +ꜩ0.000626
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1660.414
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 17
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 120
         nb_messages_in_commitment_period = 120
         starting_level_of_current_commitment_period = 2
         message_counter = 15
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 15
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1660.979 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000638
    Expected counter: 17
    Gas limit: 1761
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000638
      payload fees(the block proposer) ....... +ꜩ0.000638
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1661.107
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 18
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 136
         nb_messages_in_commitment_period = 136
         starting_level_of_current_commitment_period = 2
         message_counter = 16
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 16
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1661.751 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.00065
    Expected counter: 18
    Gas limit: 1762
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.00065
      payload fees(the block proposer) ....... +ꜩ0.00065
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1661.751
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 19
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 153
         nb_messages_in_commitment_period = 153
         starting_level_of_current_commitment_period = 2
         message_counter = 17
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 17
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1662.316 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000662
    Expected counter: 19
    Gas limit: 1763
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000662
      payload fees(the block proposer) ....... +ꜩ0.000662
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1662.316
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 20
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 171
         nb_messages_in_commitment_period = 171
         starting_level_of_current_commitment_period = 2
         message_counter = 18
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 18
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1662.881 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000674
    Expected counter: 20
    Gas limit: 1763
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000674
      payload fees(the block proposer) ....... +ꜩ0.000674
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1662.881
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 21
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 190
         nb_messages_in_commitment_period = 190
         starting_level_of_current_commitment_period = 2
         message_counter = 19
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 19
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1663.446 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000686
    Expected counter: 21
    Gas limit: 1764
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000686
      payload fees(the block proposer) ....... +ꜩ0.000686
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1663.446
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 22
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 210
         nb_messages_in_commitment_period = 210
         starting_level_of_current_commitment_period = 2
         message_counter = 20
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 20
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1664.011 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000698
    Expected counter: 22
    Gas limit: 1765
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000698
      payload fees(the block proposer) ....... +ꜩ0.000698
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1664.011
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 23
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 231
         nb_messages_in_commitment_period = 231
         starting_level_of_current_commitment_period = 2
         message_counter = 21
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 21
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1664.576 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.00071
    Expected counter: 23
    Gas limit: 1765
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.00071
      payload fees(the block proposer) ....... +ꜩ0.00071
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1664.576
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 24
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 253
         nb_messages_in_commitment_period = 253
         starting_level_of_current_commitment_period = 2
         message_counter = 22
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 22
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1665.141 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000722
    Expected counter: 24
    Gas limit: 1766
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000722
      payload fees(the block proposer) ....... +ꜩ0.000722
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1665.141
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 25
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 276
         nb_messages_in_commitment_period = 276
         starting_level_of_current_commitment_period = 2
         message_counter = 23
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 23
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1665.706 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000734
    Expected counter: 25
    Gas limit: 1766
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000734
      payload fees(the block proposer) ....... +ꜩ0.000734
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1665.706
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 26
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 300
         nb_messages_in_commitment_period = 300
         starting_level_of_current_commitment_period = 2
         message_counter = 24
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 24
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1666.271 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000746
    Expected counter: 26
    Gas limit: 1767
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000746
      payload fees(the block proposer) ....... +ꜩ0.000746
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1666.271
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 27
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 325
         nb_messages_in_commitment_period = 325
         starting_level_of_current_commitment_period = 2
         message_counter = 25
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 25
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1666.836 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000758
    Expected counter: 27
    Gas limit: 1767
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000758
      payload fees(the block proposer) ....... +ꜩ0.000758
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1666.836
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 28
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 351
         nb_messages_in_commitment_period = 351
         starting_level_of_current_commitment_period = 2
         message_counter = 26
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 26
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1667.401 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.00077
    Expected counter: 28
    Gas limit: 1768
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.00077
      payload fees(the block proposer) ....... +ꜩ0.00077
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1667.401
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 29
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 378
         nb_messages_in_commitment_period = 378
         starting_level_of_current_commitment_period = 2
         message_counter = 27
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 27
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1667.966 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000782
    Expected counter: 29
    Gas limit: 1768
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000782
      payload fees(the block proposer) ....... +ꜩ0.000782
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1667.966
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 30
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 406
         nb_messages_in_commitment_period = 406
         starting_level_of_current_commitment_period = 2
         message_counter = 28
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 28
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1668.531 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000794
    Expected counter: 30
    Gas limit: 1769
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000794
      payload fees(the block proposer) ....... +ꜩ0.000794
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1668.531
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 31
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 435
         nb_messages_in_commitment_period = 435
         starting_level_of_current_commitment_period = 2
         message_counter = 29
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 29
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1669.096 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000806
    Expected counter: 31
    Gas limit: 1770
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000806
      payload fees(the block proposer) ....... +ꜩ0.000806
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This operation sending a message to a smart contract rollup was successfully applied
      Consumed gas: 1669.096
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 32
         current messages hash  = [SC_ROLLUP_COMMITMENT_HASH]
         nb_available_messages = 465
         nb_messages_in_commitment_period = 30
         starting_level_of_current_commitment_period = 32
         message_counter = 30
         old_levels_messages = 
       content = [SC_ROLLUP_COMMITMENT_HASH]
       index = 30
       back_pointers = [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
      [SC_ROLLUP_COMMITMENT_HASH]
    
    


./tezos-sc-rollup-client-alpha rpc get /last_stored_commitment
{ "commitment":
    { "compressed_state":
        "scs11tZcCyKK6iycobH1S1XyjFBpLbbWeR6CjzHfWQvx4oA85JBz9W",
      "inbox_level": 62,
      "predecessor": "[SC_ROLLUP_COMMITMENT_HASH]",
      "number_of_messages": 0, "number_of_ticks": 0 },
  "hash": "[SC_ROLLUP_COMMITMENT_HASH]" }

./tezos-sc-rollup-client-alpha rpc get /last_published_commitment
{ "commitment":
    { "compressed_state":
        "scs11tZcCyKK6iycobH1S1XyjFBpLbbWeR6CjzHfWQvx4oA85JBz9W",
      "inbox_level": 62,
      "predecessor": "[SC_ROLLUP_COMMITMENT_HASH]",
      "number_of_messages": 0, "number_of_ticks": 0 },
  "hash": "[SC_ROLLUP_COMMITMENT_HASH]",
  "published_at_level": 65 }
