
./tezos-client --wait none originate sc rollup from '[PUBLIC_KEY_HASH]' of kind arith of type unit booting with  --burn-cap 9999999
Node is bootstrapped.
Estimated gas: 2509.140 units (will add 100 for safety)
Estimated storage: 6626 bytes added (will add 20 for safety)
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000614
    Expected counter: 1
    Gas limit: 2610
    Storage limit: 6646 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000614
      payload fees(the block proposer) ....... +ꜩ0.000614
    Originate smart contract rollup of kind arith and type unit with boot sector ''
      This smart contract rollup origination was successfully applied
      Consumed gas: 2509.140
      Storage size: 6626 bytes
      Address: [SC_ROLLUP_HASH]
      Genesis commitment hash: [SC_ROLLUP_COMMITMENT_HASH]
      Balance updates:
        [PUBLIC_KEY_HASH] ... -ꜩ1.6565
        storage fees ........................... +ꜩ1.6565


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1651.698 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000457
    Expected counter: 2
    Gas limit: 1752
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000457
      payload fees(the block proposer) ....... +ꜩ0.000457
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1651.826
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 3
         current messages hash  = [SC_ROLLUP_INBOX_HASH]
         nb_available_messages = 1
         nb_messages_in_commitment_period = 1
         starting_level_of_current_commitment_period = 2
         message_counter = 1
         old_levels_messages = 
       content = [SC_ROLLUP_INBOX_HASH]
       index = 1
       back_pointers = [SC_ROLLUP_INBOX_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1652.516 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000469
    Expected counter: 3
    Gas limit: 1753
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000469
      payload fees(the block proposer) ....... +ꜩ0.000469
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1652.644
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 4
         current messages hash  = [SC_ROLLUP_INBOX_HASH]
         nb_available_messages = 3
         nb_messages_in_commitment_period = 3
         starting_level_of_current_commitment_period = 2
         message_counter = 2
         old_levels_messages = 
       content = [SC_ROLLUP_INBOX_HASH]
       index = 2
       back_pointers = [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1653.319 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000481
    Expected counter: 4
    Gas limit: 1754
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000481
      payload fees(the block proposer) ....... +ꜩ0.000481
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1653.319
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 5
         current messages hash  = [SC_ROLLUP_INBOX_HASH]
         nb_available_messages = 6
         nb_messages_in_commitment_period = 6
         starting_level_of_current_commitment_period = 2
         message_counter = 3
         old_levels_messages = 
       content = [SC_ROLLUP_INBOX_HASH]
       index = 3
       back_pointers = [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1653.915 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000493
    Expected counter: 5
    Gas limit: 1754
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000493
      payload fees(the block proposer) ....... +ꜩ0.000493
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1654.043
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 6
         current messages hash  = [SC_ROLLUP_INBOX_HASH]
         nb_available_messages = 10
         nb_messages_in_commitment_period = 10
         starting_level_of_current_commitment_period = 2
         message_counter = 4
         old_levels_messages = 
       content = [SC_ROLLUP_INBOX_HASH]
       index = 4
       back_pointers = [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1654.718 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000505
    Expected counter: 6
    Gas limit: 1755
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000505
      payload fees(the block proposer) ....... +ꜩ0.000505
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1654.718
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 7
         current messages hash  = [SC_ROLLUP_INBOX_HASH]
         nb_available_messages = 15
         nb_messages_in_commitment_period = 15
         starting_level_of_current_commitment_period = 2
         message_counter = 5
         old_levels_messages = 
       content = [SC_ROLLUP_INBOX_HASH]
       index = 5
       back_pointers = [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1655.314 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000517
    Expected counter: 7
    Gas limit: 1756
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000517
      payload fees(the block proposer) ....... +ꜩ0.000517
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1655.314
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 8
         current messages hash  = [SC_ROLLUP_INBOX_HASH]
         nb_available_messages = 21
         nb_messages_in_commitment_period = 21
         starting_level_of_current_commitment_period = 2
         message_counter = 6
         old_levels_messages = 
       content = [SC_ROLLUP_INBOX_HASH]
       index = 6
       back_pointers = [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1655.910 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000529
    Expected counter: 8
    Gas limit: 1756
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000529
      payload fees(the block proposer) ....... +ꜩ0.000529
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1655.910
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 9
         current messages hash  = [SC_ROLLUP_INBOX_HASH]
         nb_available_messages = 28
         nb_messages_in_commitment_period = 28
         starting_level_of_current_commitment_period = 2
         message_counter = 7
         old_levels_messages = 
       content = [SC_ROLLUP_INBOX_HASH]
       index = 7
       back_pointers = [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1656.506 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000541
    Expected counter: 9
    Gas limit: 1757
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000541
      payload fees(the block proposer) ....... +ꜩ0.000541
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1656.634
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 10
         current messages hash  = [SC_ROLLUP_INBOX_HASH]
         nb_available_messages = 36
         nb_messages_in_commitment_period = 36
         starting_level_of_current_commitment_period = 2
         message_counter = 8
         old_levels_messages = 
       content = [SC_ROLLUP_INBOX_HASH]
       index = 8
       back_pointers = [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1657.309 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000553
    Expected counter: 10
    Gas limit: 1758
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000553
      payload fees(the block proposer) ....... +ꜩ0.000553
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1657.309
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 11
         current messages hash  = [SC_ROLLUP_INBOX_HASH]
         nb_available_messages = 45
         nb_messages_in_commitment_period = 45
         starting_level_of_current_commitment_period = 2
         message_counter = 9
         old_levels_messages = 
       content = [SC_ROLLUP_INBOX_HASH]
       index = 9
       back_pointers = [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
    
    


./tezos-client --wait none send sc rollup message 'text:["CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE","CAFEBABE"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1657.905 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000565
    Expected counter: 11
    Gas limit: 1758
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000565
      payload fees(the block proposer) ....... +ꜩ0.000565
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1657.905
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 12
         current messages hash  = [SC_ROLLUP_INBOX_HASH]
         nb_available_messages = 55
         nb_messages_in_commitment_period = 55
         starting_level_of_current_commitment_period = 2
         message_counter = 10
         old_levels_messages = 
       content = [SC_ROLLUP_INBOX_HASH]
       index = 10
       back_pointers = [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
    
    

