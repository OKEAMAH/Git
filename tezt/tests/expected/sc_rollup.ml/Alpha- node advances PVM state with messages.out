
./tezos-client --wait none originate sc rollup from '[PUBLIC_KEY_HASH]' of kind arith of type unit booting with  --burn-cap 9999999
Node is bootstrapped.
Estimated gas: 2509.140 units (will add 100 for safety)
Estimated storage: 6626 bytes added (will add 20 for safety)
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000614
    Expected counter: 1
    Gas limit: 2610
    Storage limit: 6646 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000614
      payload fees(the block proposer) ....... +ꜩ0.000614
    Originate smart contract rollup of kind arith and type unit with boot sector ''
      This smart contract rollup origination was successfully applied
      Consumed gas: 2509.140
      Storage size: 6626 bytes
      Address: [SC_ROLLUP_HASH]
      Genesis commitment hash: [SC_ROLLUP_COMMITMENT_HASH]
      Balance updates:
        [PUBLIC_KEY_HASH] ... -ꜩ1.6565
        storage fees ........................... +ꜩ1.6565


./tezos-client rpc get '/chains/main/blocks/head/context/sc_rollup/[SC_ROLLUP_HASH]/genesis_info'
{ "level": 2,
  "commitment_hash": "[SC_ROLLUP_COMMITMENT_HASH]" }

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs11i49JdiXyuGo6hng3jVAxQx9nHJPfuot6hDmjNYeu7kbGxtEyd"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"0"

./tezos-client --wait none send sc rollup message '["1 6 + value"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1651.749 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.00046
    Expected counter: 2
    Gas limit: 1752
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.00046
      payload fees(the block proposer) ....... +ꜩ0.00046
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1651.877
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 3
         current messages hash  = [SC_ROLLUP_INBOX_HASH]
         nb_available_messages = 1
         nb_messages_in_commitment_period = 1
         starting_level_of_current_commitment_period = 2
         message_counter = 1
         old_levels_messages = 
       content = [SC_ROLLUP_INBOX_HASH]
       index = 1
       back_pointers = [SC_ROLLUP_INBOX_HASH]
    
    


./tezos-sc-rollup-client-alpha get state value for vars/value
"\000\000\000\007"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs12jce3k85ri49csMc1uPnWpsTWd2KnDam9se9beyQtf6NSgDqPV"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"19"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs12jce3k85ri49csMc1uPnWpsTWd2KnDam9se9beyQtf6NSgDqPV"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"19"

./tezos-client --wait none send sc rollup message '["2 8 + value"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1651.971 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.00046
    Expected counter: 3
    Gas limit: 1752
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.00046
      payload fees(the block proposer) ....... +ꜩ0.00046
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1652.099
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 4
         current messages hash  = [SC_ROLLUP_INBOX_HASH]
         nb_available_messages = 2
         nb_messages_in_commitment_period = 2
         starting_level_of_current_commitment_period = 2
         message_counter = 1
         old_levels_messages = 
       content = [SC_ROLLUP_INBOX_HASH]
       index = 2
       back_pointers = [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
    
    


./tezos-sc-rollup-client-alpha get state value for vars/value
"\000\000\000\n"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs11kdKF4R7zerdddo9p7Ky5CzHKXebFF8cPo9VK9pvnrvXRTVXZy"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"37"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs11kdKF4R7zerdddo9p7Ky5CzHKXebFF8cPo9VK9pvnrvXRTVXZy"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"37"

./tezos-client --wait none send sc rollup message '["3 10 + value"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1652.195 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000461
    Expected counter: 4
    Gas limit: 1753
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000461
      payload fees(the block proposer) ....... +ꜩ0.000461
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1652.195
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 5
         current messages hash  = [SC_ROLLUP_INBOX_HASH]
         nb_available_messages = 3
         nb_messages_in_commitment_period = 3
         starting_level_of_current_commitment_period = 2
         message_counter = 1
         old_levels_messages = 
       content = [SC_ROLLUP_INBOX_HASH]
       index = 3
       back_pointers = [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
    
    


./tezos-sc-rollup-client-alpha get state value for vars/value
"\000\000\000\r"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs13Rx6jH3ve1qqqw6qAYQabea3Ub2GiXJrsWBgqJz9fcPsbBcJCc"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"56"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs13Rx6jH3ve1qqqw6qAYQabea3Ub2GiXJrsWBgqJz9fcPsbBcJCc"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"56"

./tezos-client --wait none send sc rollup message '["4 12 + value"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1652.195 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000461
    Expected counter: 5
    Gas limit: 1753
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000461
      payload fees(the block proposer) ....... +ꜩ0.000461
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1652.323
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 6
         current messages hash  = [SC_ROLLUP_INBOX_HASH]
         nb_available_messages = 4
         nb_messages_in_commitment_period = 4
         starting_level_of_current_commitment_period = 2
         message_counter = 1
         old_levels_messages = 
       content = [SC_ROLLUP_INBOX_HASH]
       index = 4
       back_pointers = [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
    
    


./tezos-sc-rollup-client-alpha get state value for vars/value
"\000\000\000\016"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs12mPUsjGqUsfyjY1712HZzbFLHGmt23PP5WHeb8w18QHVd1GokR"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"75"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs12mPUsjGqUsfyjY1712HZzbFLHGmt23PP5WHeb8w18QHVd1GokR"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"75"

./tezos-client --wait none send sc rollup message '["5 14 + value"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1652.402 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000461
    Expected counter: 6
    Gas limit: 1753
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000461
      payload fees(the block proposer) ....... +ꜩ0.000461
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1652.402
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 7
         current messages hash  = [SC_ROLLUP_INBOX_HASH]
         nb_available_messages = 5
         nb_messages_in_commitment_period = 5
         starting_level_of_current_commitment_period = 2
         message_counter = 1
         old_levels_messages = 
       content = [SC_ROLLUP_INBOX_HASH]
       index = 5
       back_pointers = [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
    
    


./tezos-sc-rollup-client-alpha get state value for vars/value
"\000\000\000\019"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs12Kb3bYztLQfaEf6zYLCTZ5uDnLVrsU8NXmy4uXu7FJCAHMQnuW"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"94"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs12Kb3bYztLQfaEf6zYLCTZ5uDnLVrsU8NXmy4uXu7FJCAHMQnuW"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"94"

./tezos-client --wait none send sc rollup message '["6 16 + value"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1652.402 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000461
    Expected counter: 7
    Gas limit: 1753
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000461
      payload fees(the block proposer) ....... +ꜩ0.000461
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1652.402
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 8
         current messages hash  = [SC_ROLLUP_INBOX_HASH]
         nb_available_messages = 6
         nb_messages_in_commitment_period = 6
         starting_level_of_current_commitment_period = 2
         message_counter = 1
         old_levels_messages = 
       content = [SC_ROLLUP_INBOX_HASH]
       index = 6
       back_pointers = [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
    
    


./tezos-sc-rollup-client-alpha get state value for vars/value
"\000\000\000\022"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs11Z4sELS3xEYnoXyh5quHhzG14MM3nXvo2nzXcNeupfWqUTSY5k"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"113"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs11Z4sELS3xEYnoXyh5quHhzG14MM3nXvo2nzXcNeupfWqUTSY5k"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"113"

./tezos-client --wait none send sc rollup message '["7 18 + value"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1652.402 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000461
    Expected counter: 8
    Gas limit: 1753
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000461
      payload fees(the block proposer) ....... +ꜩ0.000461
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1652.402
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 9
         current messages hash  = [SC_ROLLUP_INBOX_HASH]
         nb_available_messages = 7
         nb_messages_in_commitment_period = 7
         starting_level_of_current_commitment_period = 2
         message_counter = 1
         old_levels_messages = 
       content = [SC_ROLLUP_INBOX_HASH]
       index = 7
       back_pointers = [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
    
    


./tezos-sc-rollup-client-alpha get state value for vars/value
"\000\000\000\025"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs134Zv1hADCyVW44K5CJGLFvNBDWmF4My4SHEx27RJeC4YkUpFUk"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"132"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs134Zv1hADCyVW44K5CJGLFvNBDWmF4My4SHEx27RJeC4YkUpFUk"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"132"

./tezos-client --wait none send sc rollup message '["8 20 + value"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1652.402 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000461
    Expected counter: 9
    Gas limit: 1753
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000461
      payload fees(the block proposer) ....... +ꜩ0.000461
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1652.530
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 10
         current messages hash  = [SC_ROLLUP_INBOX_HASH]
         nb_available_messages = 8
         nb_messages_in_commitment_period = 8
         starting_level_of_current_commitment_period = 2
         message_counter = 1
         old_levels_messages = 
       content = [SC_ROLLUP_INBOX_HASH]
       index = 8
       back_pointers = [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
    
    


./tezos-sc-rollup-client-alpha get state value for vars/value
"\000\000\000\028"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs137z1Hshy7zUWWM38hrmtz2E9LsPLQpMnBtnGbgXiiKHDj7P17Y"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"151"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs137z1Hshy7zUWWM38hrmtz2E9LsPLQpMnBtnGbgXiiKHDj7P17Y"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"151"

./tezos-client --wait none send sc rollup message '["9 22 + value"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1652.609 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000461
    Expected counter: 10
    Gas limit: 1753
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000461
      payload fees(the block proposer) ....... +ꜩ0.000461
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1652.609
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 11
         current messages hash  = [SC_ROLLUP_INBOX_HASH]
         nb_available_messages = 9
         nb_messages_in_commitment_period = 9
         starting_level_of_current_commitment_period = 2
         message_counter = 1
         old_levels_messages = 
       content = [SC_ROLLUP_INBOX_HASH]
       index = 9
       back_pointers = [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
    
    


./tezos-sc-rollup-client-alpha get state value for vars/value
"\000\000\000\031"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs139dDeHknV6X8Xq9pttHXgmfQgbBTYqxFAt62Td91m3C99ezUGX"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"170"

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs139dDeHknV6X8Xq9pttHXgmfQgbBTYqxFAt62Td91m3C99ezUGX"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"170"

./tezos-client --wait none send sc rollup message '["10 24 + value"]' from bootstrap1 to '[SC_ROLLUP_HASH]'
Node is bootstrapped.
Estimated gas: 1652.626 units (will add 100 for safety)
Estimated storage: no bytes added
Operation successfully injected in the node.
Operation hash is '[OPERATION_HASH]'
NOT waiting for the operation to be included.
Use command
  tezos-client wait for [OPERATION_HASH] to be included --confirmations 1 --branch [BLOCK_HASH]
and/or an external block explorer to make sure that it has been included.
This sequence of operations was run:
  Manager signed operations:
    From: [PUBLIC_KEY_HASH]
    Fee to the baker: ꜩ0.000462
    Expected counter: 11
    Gas limit: 1753
    Storage limit: 0 bytes
    Balance updates:
      [PUBLIC_KEY_HASH] ... -ꜩ0.000462
      payload fees(the block proposer) ....... +ꜩ0.000462
    Add a message to the inbox of the smart contract rollup at address [SC_ROLLUP_HASH]
      This smart contract rollup messages submission was successfully applied
      Consumed gas: 1652.626
      Resulting inbox state: 
         rollup = [SC_ROLLUP_HASH]
         level = 12
         current messages hash  = [SC_ROLLUP_INBOX_HASH]
         nb_available_messages = 10
         nb_messages_in_commitment_period = 10
         starting_level_of_current_commitment_period = 2
         message_counter = 1
         old_levels_messages = 
       content = [SC_ROLLUP_INBOX_HASH]
       index = 10
       back_pointers = [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
      [SC_ROLLUP_INBOX_HASH]
    
    


./tezos-sc-rollup-client-alpha get state value for vars/value
"\000\000\000\""

./tezos-sc-rollup-client-alpha rpc get /global/state_hash
"scs121tVDwin1fUikRYZEFSyoXFV7HQw8u93PvUgw4SCk6PiVYbg2o"

./tezos-sc-rollup-client-alpha rpc get /global/total_ticks
"190"
