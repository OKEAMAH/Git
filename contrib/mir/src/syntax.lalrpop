//****************************************************************************//
//                                                                            //
// SPDX-License-Identifier: MIT                                               //
// Copyright (c) [2023] Serokell <hi@serokell.io>                             //
//                                                                            //
//****************************************************************************//

#![allow(dead_code)]
use std::str::FromStr;

use crate::ast::*;
use crate::parser::{validate_unescape_string, ParserError};

grammar;

extern {
    type Error = ParserError;
}

match {
  r"(?-u:\s)+" => {}, // more or less same as default, but required to build w/o unicode
  _
}

number: i128 = <s:r"([+-]?)[0-9]+"> =>? i128::from_str(s)
  .map_err(|_| ParserError::NumericLiteral(s.to_owned()).into() );

u10: u16 = <s:r"([+-]?)[0-9]+"> =>? {
    let res = u16::from_str(s)
      .map_err(|_| ParserError::ExpectedU10(s.to_owned()) )?;
    if res >= 1024 {
      return Err(ParserError::ExpectedU10(s.to_owned()).into());
    }
    Ok(res)
  };

pub string: String = <r#""(?:\\.|[^\\"])*""#> =>? validate_unescape_string(<>);

atomic_type: Type = {
  "int"  => Type::Int,
  "nat"  => Type::Nat,
  "bool" => Type::Bool,
  "mutez" => Type::Mutez,
  "string" => Type::String,
  "unit" => Type::Unit,
  "operation" => Type::Operation,
}

pair_args: Type = {
    type_expr => <>,
    type_expr pair_args => Type::new_pair(<>)
}

composite_type: Type = {
    "pair" <type_expr> <pair_args> => Type::new_pair(<>),
    "option" <type_expr> => Type::new_option(<>),
    "list" <type_expr> => Type::new_list(<>),
}

type_expr: Type = {
    atomic_type => <>,
    "(" <composite_type> ")" => <>,
    "(" <type_expr> ")" => <>,
}

boolean: bool = {
  "True" => true,
  "False" => false,
}

use Value::*;
atomic_value: Value = {
  <n:number> => NumberValue(n),
  <b:boolean> => BooleanValue(b),
  <string> => StringValue(<>),
  "Unit" => UnitValue,
  "None" => OptionValue(None),
}

pair_val_args: Value = {
  value_expr => <>,
  value_expr pair_val_args => Value::new_pair(<>)
}

composite_value: Value = {
  "Pair" <value_expr> <pair_val_args> => Value::new_pair(<>),
  "Some" <value_expr> => Value::new_option(Some(<>)),
}

value_expr: Value = {
  atomic_value => <>,
  "(" <value_expr_naked> ")" => <>,
  "{" <value_seq> "}" => Seq(<>),
}

value_expr_naked: Value = {
  composite_value => <>,
  value_expr => <>,
}

value_seq: Vec<Value> = semicolonSepSeq<value_expr_naked>;

use Instruction::*;
instruction: ParsedInstruction = {
  "PUSH" <type_expr> <value_expr> => Push((<>)),
  "INT" => Int,
  "GT" => Gt,
  "LOOP" <ib: instructionBlock> => Loop(ib),
  "DIP" <n:u10?> <ib: instructionBlock> => Dip(n, ib),
  "ADD" => Add(()),
  "DROP" <n:u10?> => Drop(n),
  "SWAP" => Swap,
  "IF" <t: instructionBlock> <f: instructionBlock> => If(t, f),
  "DUP" <n:u10?> => Dup(n),
  "FAILWITH" => Failwith,
  "UNIT" => Unit,
  "CAR" => Car,
  "CDR" => Cdr,
  "PAIR" => Pair,
  "IF_NONE" <instructionBlock> <instructionBlock> => IfNone(<>),
  "SOME" => ISome,
  "COMPARE" => Compare,
  "AMOUNT" => Amount,
  "NIL" <type_expr> => Nil(<>),
}

instructionSeq = semicolonSepSeq<instruction>;

semicolonSepSeq<T>: Vec<T> = {
  <mut tseq:(<T>";")*><i:T?> => {
    // A sequence of T-followed-by-a-semicolon matched by
    // `(<T>";")*` resulting in `Vec<T>` and bound to `ib`,
    // which can be optionally followed by a single trailing T,
    // matched by `<i:T?>.

    match i {
      Some(t) => {
        tseq.push(t);
        tseq
      },
      None => tseq
    }
  }
}

pub instructionBlock: ParsedInstructionBlock = {
  "{" <is:instructionSeq> "}" => is,
}
