//****************************************************************************//
//                                                                            //
// SPDX-License-Identifier: MIT                                               //
// Copyright (c) [2023] Serokell <hi@serokell.io>                             //
//                                                                            //
//****************************************************************************//

#![allow(dead_code)]
use std::str::FromStr;
use lalrpop_util::ParseError;

use crate::ast::*;

grammar;

match {
  r"(?-u:\s)+" => {}, // more or less same as default, but required to build w/o unicode
  _
}

number: i32 = <s:r"([+-]?)[0-9]+"> =>? i32::from_str(s)
  .map_err(|_| ParseError::User { error : "parsing of numeric literal failed." } );

usize: usize = {
  <n:number> =>? usize::try_from(n)
    .map_err(|_| ParseError::User { error : "argument is out of range." } )
}

type_: Type = {
  "int"  => Type::Int,
  "nat"  => Type::Nat,
  "bool" => Type::Bool,
}

boolean: bool = {
  "True" => true,
  "False" => false,
}

use Value::*;
value: Value = {
  <n:number> => NumberValue(n),
  <b:boolean> => BooleanValue(b)
}

use Instruction::*;
instruction: ParsedInstruction = {
  "PUSH" <t:type_> <v:value> => Push(t, v),
  "INT" => Int,
  "GT" => Gt,
  "LOOP" <ib: instructionBlock> => Loop(ib),
  "DIP" <n:usize?> <ib: instructionBlock> => Dip(n, ib),
  "ADD" => Add(()),
  "DROP" <n:usize?> => Drop(n),
  "SWAP" => Swap,
  "IF" <t: instructionBlock> <f: instructionBlock> => If(t, f),
  "DUP" <n:usize?> => Dup(n),
}

instructionSeq: Vec<ParsedInstruction> = {
  <mut ib:(<instruction>";")*><i:instruction?> => {
    // A sequence of instruction-followed-by-a-semicolon matched by
    // `(<instruction>";")*` resulting in `Vec<instruction>` and bound to `ib`,
    // which can be optionally followed by a single trailing instruction,
    // matched by `<i:instruction?>.

    match i {
      Some(instr) => {
        ib.push(instr);
        ib
      },
      None => {
        ib
      }
    }
  }
}

pub instructionBlock: InstructionBlock = {
  "{" <is:instructionSeq> "}" => is,
}
