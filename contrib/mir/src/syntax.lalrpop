//****************************************************************************//
//                                                                            //
// SPDX-License-Identifier: MIT                                               //
// Copyright (c) [2023] Serokell <hi@serokell.io>                             //
//                                                                            //
//****************************************************************************//

#![allow(dead_code, unused_imports)]
#![allow(clippy::all)]

use crate::ast::*;
use crate::parser::{ParserError, ContractEntity};
use crate::lexer::{Prim, Tok};

grammar;

extern {
    type Error = ParserError;
    type Location = usize;

    enum Tok {
        number => Tok::Number(<i128>),
        string => Tok::String(<String>),
        ann => Tok::Annotation,
        "parameter" => Tok::Prim(Prim::parameter),
        "storage" => Tok::Prim(Prim::storage),
        "code" => Tok::Prim(Prim::code),
        "int" => Tok::Prim(Prim::int),
        "nat" => Tok::Prim(Prim::nat),
        "bool" => Tok::Prim(Prim::bool),
        "mutez" => Tok::Prim(Prim::mutez),
        "string" => Tok::Prim(Prim::string),
        "unit" => Tok::Prim(Prim::unit),
        "operation" => Tok::Prim(Prim::operation),
        "pair" => Tok::Prim(Prim::pair),
        "option" => Tok::Prim(Prim::option),
        "list" => Tok::Prim(Prim::list),
        "map" => Tok::Prim(Prim::map),
        "True" => Tok::Prim(Prim::True),
        "False" => Tok::Prim(Prim::False),
        "Unit" => Tok::Prim(Prim::Unit),
        "None" => Tok::Prim(Prim::None),
        "Pair" => Tok::Prim(Prim::Pair),
        "Some" => Tok::Prim(Prim::Some),
        "Elt" => Tok::Prim(Prim::Elt),
        "PUSH" => Tok::Prim(Prim::PUSH),
        "INT" => Tok::Prim(Prim::INT),
        "GT" => Tok::Prim(Prim::GT),
        "LOOP" => Tok::Prim(Prim::LOOP),
        "DIP" => Tok::Prim(Prim::DIP),
        "ADD" => Tok::Prim(Prim::ADD),
        "DROP" => Tok::Prim(Prim::DROP),
        "SWAP" => Tok::Prim(Prim::SWAP),
        "IF" => Tok::Prim(Prim::IF),
        "DUP" => Tok::Prim(Prim::DUP),
        "FAILWITH" => Tok::Prim(Prim::FAILWITH),
        "UNIT" => Tok::Prim(Prim::UNIT),
        "CAR" => Tok::Prim(Prim::CAR),
        "CDR" => Tok::Prim(Prim::CDR),
        "PAIR" => Tok::Prim(Prim::PAIR),
        "IF_NONE" => Tok::Prim(Prim::IF_NONE),
        "SOME" => Tok::Prim(Prim::SOME),
        "COMPARE" => Tok::Prim(Prim::COMPARE),
        "AMOUNT" => Tok::Prim(Prim::AMOUNT),
        "NIL" => Tok::Prim(Prim::NIL),
        "GET" => Tok::Prim(Prim::GET),
        "UPDATE" => Tok::Prim(Prim::UPDATE),
        "(" => Tok::LParen,
        ")" => Tok::RParen,
        "{" => Tok::LBrace,
        "}" => Tok::RBrace,
        ";" => Tok::Semi,
    }
}

u10: u16 = <n:number> =>? {
    let res = u16::try_from(n)
      .map_err(|_| ParserError::ExpectedU10(n) )?;
    if res >= 1024 {
      return Err(ParserError::ExpectedU10(n).into());
    }
    Ok(res)
  };

anns: () = ann* => ();

atomic_type: Type = {
  "int"  => Type::Int,
  "nat"  => Type::Nat,
  "bool" => Type::Bool,
  "mutez" => Type::Mutez,
  "string" => Type::String,
  "unit" => Type::Unit,
  "operation" => Type::Operation,
}

pair_args: Type = {
    type_expr => <>,
    type_expr pair_args => Type::new_pair(<>)
}

composite_type: Type = {
    "pair"   anns <type_expr> <pair_args> => Type::new_pair(<>),
    "option" anns <type_expr> => Type::new_option(<>),
    "list"   anns <type_expr> => Type::new_list(<>),
    "map"    anns <type_expr> <type_expr> => Type::new_map(<>),
}

type_expr: Type = {
    <atomic_type> => <>,
    "(" <atomic_type> ann anns ")" => <>,
    "(" <composite_type> ")" => <>,
    "(" <type_expr> ")" => <>,
}

boolean: bool = {
  "True" => true,
  "False" => false,
}

atomic_value: Value = {
  <n:number> => Value::Number(n),
  <b:boolean> => Value::Boolean(b),
  <string> => Value::String(<>),
  "Unit" => Value::Unit,
  "None" => Value::Option(None),
}

pair_val_args: Value = {
  value_expr => <>,
  value_expr pair_val_args => Value::new_pair(<>)
}

composite_value: Value = {
  "Pair" <value_expr> <pair_val_args> => Value::new_pair(<>),
  "Some" <value_expr> => Value::new_option(Some(<>)),
  "Elt" <value_expr> <value_expr> => Value::new_elt(<>),
}

value_expr: Value = {
  atomic_value => <>,
  "(" <value_expr_naked> ")" => <>,
  "{" <value_seq> "}" => Value::Seq(<>),
}

value_expr_naked: Value = {
  composite_value => <>,
  value_expr => <>,
}

value_seq: Vec<Value> = semicolonSepSeq<value_expr_naked>;

use Instruction::*;
instruction: ParsedInstruction = {
  "PUSH" anns <type_expr> <value_expr> => Push((<>)),
  "INT" anns => Int,
  "GT" anns => Gt,
  "LOOP" anns <ib: instructionBlock> => Loop(ib),
  "DIP" anns <n:u10?> <ib: instructionBlock> => Dip(n, ib),
  "ADD" anns => Add(()),
  "DROP" anns <n:u10?> => Drop(n),
  "SWAP" anns => Swap,
  "IF" anns <t: instructionBlock> <f: instructionBlock> => If(t, f),
  "DUP" anns <n:u10?> => Dup(n),
  "FAILWITH" anns => Failwith,
  "UNIT" anns => Unit,
  "CAR" anns => Car,
  "CDR" anns => Cdr,
  "PAIR" anns => Pair,
  "IF_NONE" anns <instructionBlock> <instructionBlock> => IfNone(<>),
  "SOME" anns => ISome,
  "COMPARE" anns => Compare,
  "AMOUNT" anns => Amount,
  "NIL" anns <type_expr> => Nil(<>),
  "GET" anns => Get(()),
  "UPDATE" anns => Update(()),
  instructionBlock => Instruction::Seq(<>),
}

instructionSeq = semicolonSepSeq<instruction>;

semicolonSepSeq<T>: Vec<T> = {
  <mut tseq:(<T>";")*><i:T?> => {
    // A sequence of T-followed-by-a-semicolon matched by
    // `(<T>";")*` resulting in `Vec<T>` and bound to `ib`,
    // which can be optionally followed by a single trailing T,
    // matched by `<i:T?>.

    match i {
      Some(t) => {
        tseq.push(t);
        tseq
      },
      None => tseq
    }
  }
}

pub instructionBlock: ParsedInstructionBlock = {
  "{" <is:instructionSeq> "}" => is,
}

pub Type: Type = type_expr;

ContractEntity: ContractEntity = {
  "parameter" <type_expr> => ContractEntity::Parameter(<>),
  "storage" <type_expr> => ContractEntity::Storage(<>),
  "code" <instruction> => ContractEntity::Code(<>),
}

ContractEntitySeq = semicolonSepSeq<ContractEntity>;

pub Contract: Contract<ParsedStage> = {
  ContractEntitySeq =>? <>.try_into().map_err(Into::into),
  "{" <Contract> "}" => <>,
}
