#!/bin/sh

set -u

if [ -n "${TRACE:-}" ]; then set -x; fi

usage() {
    cat << EOF
Usage: $0 KSY_DIR HEX_INPUT_DIR

$(basename "$0") is a script used for e2e testing of "lib_kaitai_of_data_encoding"
library.

Arguments:
KSY_DIR                 Directory with kaitai struct files (.ksy files) to be
                        validated.
HEX_INPUT_DIR           Directory with test inputs for .ksy files inside KSY_DIR.
                        It should consist of "valid" and "invalid" sub-directories.
                        
                        For every .ksy file inside KSY_DIR/[encoding].ksy,
                        script expects the following entries:
                        - HEX_INPUT_DIR/valid/[encoding]/*.hex (valid input).
                        - HEX_INPUT_DIR/invvalid/[encoding]/*.hex (invalid input).

E2e test consist of the following steps:
1. For every kaitai struct specification file (.ksy file), we first
   generate a valid parser in Javascript using "ksc" (kaitai-struct-compiler).
2. For every autogenerated parser from 1., we test that it succeeds parsing
   corresponding valid binary blobs and fails parsing invalid binary blobs.

DEPENDENCIES:
- We expect "node" and "npm" to be installed and part of the "PATH".
- Kaitai Javascript runtime environment: E.g. run "npm install -g kaitai-struct".
- "NODE_PATH" available: E.g. run "export NODE_PATH="/usr/lib/node_modules".
EOF
    exit 1
}

if [ "${1:-}" = "--help" ] || [ $# != 2 ]; then
    usage
fi

PARSE_AND_PRINT="contrib/lib_kaitai_of_data_encoding/test/parse_and_print.js"
KSY_DIR="$1"
HEX_INPUT_DIR="$2"

# Create a temporary directory 
tmp=$(mktemp -d)

cleanup() {
	rm -rf "${tmp}"
}

# Register a cleanup.
trap cleanup EXIT

parse_hex_input() {
    hex_file=$1
    encoding=$2
    parser=$3
    input_filename="$(basename "$hex_file" .hex)"
    bin_file=$(mktemp --tmpdir="${tmp}" --suffix ".${encoding}.${input_filename}.bin")
    xxd -r -p <"$hex_file" >"$bin_file"
    echo "Running validation of $encoding using valid '$encoding/$input_filename.hex' input."
    echo "Bin file path: $bin_file"
    echo "Expected ${encoding} hex input: "
    cat "$hex_file"
    echo
    echo "Expected ${encoding} input in binary: "
    xxd -b: <"${bin_file}"
    echo "Running \"ksdump \$bin_file \$ksy_file\":"
    # To test semantic correctness of autogenerated javascript parser, we load
    # the parser, parse the binary input with it, and print it to console. 
    node "$PARSE_AND_PRINT" "$parser" "$bin_file"
}

validate_kaitai_spec() {
    encoding=$1
    valid_input="${HEX_INPUT_DIR}/valid/${encoding}"
    invalid_input="${HEX_INPUT_DIR}/invalid/${encoding}"
    ksy_file="${KSY_DIR}/${encoding}.ksy"
    # Ksc gives an auto-generated file a random name.
    # In order to get this filename at runtime, we
    # create a dummy `tmp/*/parser/${encoding}/` dir
    # and get an autogenerated file assuming that this
    # directory contains only one file.
    parser_dir="${tmp}/parsers/${encoding}"
    mkdir -p "$parser_dir"
    ksc "$ksy_file" -t javascript --outdir "$parser_dir"
    parser_path="$(find "$parser_dir" -type f | head -n 1)"
    echo "Expected ${encoding} ksy file:"
    cat "$ksy_file"
    echo
    echo "Expected ${encoding} autogenerated parser:"
    cat "$parser_path"
    echo
    for hex_file in "$valid_input"/*; do
        parse_hex_input "$hex_file" "$encoding" "$parser_path"
        validation_status=$?
        if [ $validation_status != 0 ]; then
            echo "$encoding: Autogenerated parser fails to parse valid binary blob."
            return 1
        fi
    done
    for hex_file in "$invalid_input"/*; do
        parse_hex_input "$hex_file" "$encoding" "$parser_path"
        validation_status=$?
        if [ $validation_status = 0 ]; then
            echo "$encoding: Autogenerated parser parses invalid(!) binary blob."
            return 1
        fi
    done
}

for ksy_file in "$KSY_DIR"/*; do
    echo "Running validation of $ksy_file."
    encoding="$(basename "$ksy_file" .ksy)"
    validation_output=$(validate_kaitai_spec "$encoding" 2>&1)
    validation_status=$?
    if [ $validation_status -eq 0 ]; then
        echo "$encoding kaitai spec file is valid."
    else
        echo "$encoding kaitai spec files is not valid."
        echo "See the action log:"
        echo "$validation_output"
        exit 1
    fi
done
