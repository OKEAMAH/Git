#!/bin/sh

set -u


if [ -n "${TRACE:-}" ]; then set -x; fi

usage() {
	echo "Usage: $0"
	echo
	echo "TODO: explain the command usage."
	echo ""

	exit 1
}

if [ "${1:-}" = "--help" ] || [ $# != 0 ]; then
	usage
fi

# TODO: assert dependencies
#         - node
#         - npm install -g kaitai-struct
#         - export node path, e.g. `export NODE_PATH="/usr/lib/node_modules"`


PARSE_AND_PRINT="contrib/lib_kaitai_of_data_encoding/test/parse_and_print.js"

# TODO: Do a temp files clean-up
validate_kaitai_spec() {
	encoding=$1
    tmp=$(mktemp -d)
    bin_file=$(mktemp --tmpdir="${tmp}" --suffix ".${encoding}.bin")
    ksy_file="contrib/lib_kaitai_of_data_encoding/test/expected/${encoding}.ksy"
    hex_file="contrib/lib_kaitai_of_data_encoding/test/input/${encoding}.hex"
    xxd -r -p < "$hex_file" > "$bin_file"
    parser_dir="${tmp}/parsers/${encoding}"
    # ksc gives an auto-generated file a random name.
    # In order to get this filename at runtime, we
    # create a dummy `tmp/*/parser/${encoding}/` dir
    # and get an autogenerated file assuming that this
    # directory contains only one file. 
    mkdir -p "$parser_dir"
    ksc "$ksy_file" -t javascript --outdir "$parser_dir"
    # TODO: Is this bash idiomatic && robust?
    parser_file_name="$(ls "$parser_dir" | head -n 1)"
    parser_path="$parser_dir/$parser_file_name"
    echo "Expected ${encoding} ksy file:"
    cat "$ksy_file"
    echo
    echo "Expected ${encoding} autogenerated parser"
    cat "$parser_path"
    echo
    echo "Expected ${encoding} hex input: "
    cat "$hex_file"
    echo
    echo "Expected ${encoding} input in binary: "
    xxd -b: < "${bin_file}"
    echo
    echo "Running \"ksdump \$bin_file \$ksy_file\":"
    # TODO: Sum-up what this script does.
    node "$PARSE_AND_PRINT" "$parser_path" "$bin_file" 
    # TODO: Assert against multiple inputs
    # TODO/(important!): Mimic assert fail against malformed
    #                    binary input.
}


# TODO: Make a loop: for every file inside `test/expected` do...
encoding=ground_uint8
validation_output=$(validate_kaitai_spec $encoding 2>&1 )
validation_status=$?
if [ $validation_status -eq 0 ];
then
    echo "$encoding kaitai spec file is valid."
else 
    echo "$encoding kaitai spec files is not valid."
	echo "See the action log:"
	echo "$validation_output"
fi


