.oc.build:
  extends:
    - .oc.build_template
    - .rules__octez_changes
  variables:
    ARCH: ""
  script:
    - ./scripts/ci/build_full_unreleased.sh
  artifacts:
    name: "build-$ARCH-$CI_COMMIT_REF_SLUG"
    paths:
      - octez-*
      - src/proto_*/parameters/*.json
      - _build/default/src/lib_protocol_compiler/bin/main_native.exe
      - _build/default/tezt/tests/main.exe
      - _build/default/contrib/octez_injector_server/octez_injector_server.exe
    expire_in: 1 day
    when: on_success

.oc.build_arm64:
  extends:
    - .oc.build
    - .tags_template__build_arm64
  variables:
    ARCH: "arm64"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $TZ_SCHEDULE_KIND == "EXTENDED_TESTS"'
      when: always
    # Run when there is label on the merge request
    - if: '$CI_MERGE_REQUEST_LABELS =~ /(?:^|[,])ci--arm64(?:$|[,])/'
      when: on_success
    - changes:
        - src/**/*
        - .gitlab/**/*
        - .gitlab-ci.yml
      when: manual
      allow_failure: true

# similar to the build template above, this template
# compiles all binaries using the static profile.
.oc.build_static_binaries_template:
  extends:
    - .default_settings_template
    - .image_template__runtime_build_dependencies
    - .rules__octez_changes
  stage: build
  variables:
    ARCH: ""
  before_script:
    - ./scripts/ci/take_ownership.sh
    - eval $(opam env)
  script:
    - ./scripts/ci/build_static_binaries.sh
  artifacts:
    paths:
      - "octez-binaries/$ARCH/*"

.oc.docker:rust-toolchain_template:
  extends:
    - .image_template__docker
    - .docker_auth_template
  stage: build
  variables:
    # These image are not built for external use.
    CI_DOCKER_HUB: "false"
  script:
    - ./scripts/ci/docker_rust_toolchain_build.sh
  artifacts:
    reports:
      dotenv: rust_toolchain_tag.env

.oc.build_docker_release_template:
  extends:
    - .image_template__docker
    - .docker_auth_template
  dependencies: [oc.docker:rust-toolchain]
  needs: [oc.docker:rust-toolchain]
  variables:
    DOCKER_BUILD_TARGET: "without-evm-artifacts"
    IMAGE_ARCH_PREFIX: ""
  script:
    - ./scripts/ci/docker_release.sh

.oc.build_x86_64:
  extends:
    - .oc.build
    # Add coverage instrumentation for the integration tests.
    - .oc.template__coverage_instrumentation
    # These job are the main bottleneck since a lot of tests depend on
    # them.  So we start them even before sanity_ci.
    - .needs__trigger
  variables:
    ARCH: "x86_64"
