from typing import Dict, List, Tuple
import subprocess
import os
import tempfile
import shutil
from . import utils


class Node(subprocess.Popen):
    """Forks a tezos node and manages its persistent state"""

    # TODO this was initially meant to be a sandbox node only,
    #      to be more generic, we could allow any command parameters
    #      and leave the caller setting them.

    def __init__(self,
                 node: str,
                 sandbox_file: str = None,
                 expected_pow: float = 0.0,
                 node_dir: str = None,
                 use_tls: Tuple[str, str] = None,
                 params: List[str] = None,
                 log_file: str = None,
                 p2p_port: int = 9732,
                 rpc_port: int = 8732,
                 peers: List[int] = None,
                 log_levels: Dict[str, str] = None,
                 env: Dict[str, str] = None):

        """Creates a new Popen instance for a tezos-node, and manages context.

        args:
            use_tls (tuple): None if no tls, else couple of strings
                            (certificate, key)

        Creates a temporary node directory unless provided  by caller.
        Generate node identity.
        """
        if sandbox_file:
            assert os.path.isfile(sandbox_file), f'{sandbox_file} not a file'
        assert os.path.isfile(node), f'{node} not a file'
        assert node_dir is None or os.path.isdir(node_dir), (f'{node_dir} not '
                                                             f'a dir')
        if params is None:
            params = []

        self.log_file = log_file
        self._temp_dir = node_dir is None
        if node_dir is None:
            node_dir = tempfile.mkdtemp(prefix='tezos-node.')
        self.node_dir = node_dir
        self.p2p_port = p2p_port
        self.rpc_port = rpc_port

        # TODO make this more generic and let the caller fix
        #  parameters
        node_config = [node,
                       'config',
                       'init',
                       '--data-dir', node_dir,
                       '--net-addr', f'127.0.0.1:{p2p_port}',
                       '--rpc-addr', f'127.0.0.1:{rpc_port}',
                       '--expected-pow', str(expected_pow)] + params
        node_identity = [node,
                         'identity',
                         'generate',
                         str(expected_pow),
                         '--data-dir', node_dir]
        node_run = [node,
                    'run',
                    '--data-dir', node_dir,
                    '--no-bootstrap-peers']
        if sandbox_file:
            node_run.append(f'--sandbox={sandbox_file}')
        node_run.extend(params)

        if peers is not None:
            for peer in peers:
                node_run.append('--peer')
                node_run.append(f'127.0.0.1:{peer}')

        if use_tls:
            # We can't create tezos.crt/tezos.key here
            # as node_dir has to be empty when we run node_config
            node_config += ['--rpc-tls',
                            f'{node_dir}/tezos.crt,{node_dir}/tezos.key']

        new_env = None
        if env is not None:
            new_env = os.environ.copy()
            new_env.update(env)
        if log_levels is not None:
            new_env = os.environ.copy() if new_env is None else new_env
            lwt_log = ";".join(f'{key} -> {values}' for key, values in
                               log_levels.items())
            new_env['LWT_LOG'] = lwt_log

        node_config_str = utils.format_command(node_config)
        print(node_config_str)
        subprocess.run(node_config, check=True, env=new_env)
        node_identity_str = utils.format_command(node_identity)
        print(node_identity_str)
        subprocess.run(node_identity, check=True, env=new_env)
        node_run_str = utils.format_command(node_run)

        if use_tls:
            with open(f'{node_dir}/tezos.crt', 'w+') as file:
                file.write(use_tls[0])
            with open(f'{node_dir}/tezos.key', 'w+') as file:
                file.write(use_tls[1])

        print(node_run_str)
        stdout, stderr = utils.prepare_log(node_run, log_file)
        subprocess.Popen.__init__(self, node_run, stdout=stdout, stderr=stderr,
                                  env=new_env)

    def cleanup(self):
        """Remove node directory (only if generated by constructor)"""
        if self._temp_dir:
            shutil.rmtree(self.node_dir)
