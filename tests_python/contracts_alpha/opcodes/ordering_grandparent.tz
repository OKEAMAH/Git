# This contract intends to call "opcodes/ordering_mix_dfs_bfs_parent.tz" or "opcodes/ordering_concat_string_child.tz"
#
# list (pair
#         (pair
#             # This list in the input of "ordering_mix_dfs_bfs_parent.tz"
#             # If there is only one element in the list, it will call "ordering_concat_string_child.tz" instead
#             (list (pair (pair string address) (pair bool bool)))
#
#             # The address is the address of ordering_mix_dfs_bfs_parent.tz
#             address)
#         )
#
{ parameter (list (pair (list (pair string address)) address)) ;
  storage unit ;
  code { NIL operation ;
         SWAP ;
         CAR ;
         ITER { DUP ;
                CDR ;
                SWAP ;
                CAR ;
                PUSH nat 1 ;
                SWAP ;
                DUP ;
                DUG 2 ;
                SIZE ;
                COMPARE ;
                EQ ;
                IF { SWAP ;
                     DROP ;
                     IF_CONS { SWAP ; DROP ; SOME } { NONE (pair string address) } ;
                     IF_NONE { PUSH string "No head" ; FAILWITH } {} ;
                     DUP ;
                     CDR ;
                     SWAP ;
                     CAR ;
                     SWAP ;
                     CONTRACT string ;
                     IF_NONE { PUSH string "Not a contract" ; FAILWITH } {} ;
                     DIG 2 ;
                     SWAP ;
                     PUSH mutez 0 ;
                     DIG 3 ;
                     TRANSFER_TOKENS ;
                     CONS }
                   { SWAP ;
                     CONTRACT (list (pair string address)) ;
                     IF_NONE { PUSH string "Not a contract" ; FAILWITH } {} ;
                     DIG 2 ;
                     SWAP ;
                     PUSH mutez 0 ;
                     DIG 3 ;
                     TRANSFER_TOKENS ;
                     CONS } } ;
         NIL operation ;
         SWAP ;
         PAIR ;
         LEFT (list operation) ;
         LOOP_LEFT
           { DUP ;
             CDR ;
             SWAP ;
             CAR ;
             IF_CONS
               { DIG 2 ; SWAP ; CONS ; SWAP ; PAIR ; LEFT (list operation) }
               { RIGHT (pair (list operation) (list operation)) } } ;
         PUSH unit Unit ;
         SWAP ;
         PAIR } }

