(*****************************************************************************)
(*                                                                           *)
(* Open Source License                                                       *)
(* Copyright (c) 2023 Trili Tech <contact@trili.tech>                        *)
(*                                                                           *)
(* Permission is hereby granted, free of charge, to any person obtaining a   *)
(* copy of this software and associated documentation files (the "Software"),*)
(* to deal in the Software without restriction, including without limitation *)
(* the rights to use, copy, modify, merge, publish, distribute, sublicense,  *)
(* and/or sell copies of the Software, and to permit persons to whom the     *)
(* Software is furnished to do so, subject to the following conditions:      *)
(*                                                                           *)
(* The above copyright notice and this permission notice shall be included   *)
(* in all copies or substantial portions of the Software.                    *)
(*                                                                           *)
(* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR*)
(* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  *)
(* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL   *)
(* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER*)
(* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING   *)
(* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER       *)
(* DEALINGS IN THE SOFTWARE.                                                 *)
(*                                                                           *)
(*****************************************************************************)

type genesis_t = {timestamp : string; block : string; protocol : string}

type values_t = {genesis_pubkey : string}

type genesis_parameters_t = {values : values_t}

type network_t = {
  genesis : genesis_t;
  _genesis_parameters : genesis_parameters_t;
  chain_name : string;
  _sandboxed_chain_name : string;
}

type input_t = {_data_dir : string; network : network_t}

let default_entries = "  activation_account_name: baker_0\n"

let format_chain_name chain_name =
  Format.sprintf "  chain_name: \"%s\"\n" chain_name

let format_genesis {timestamp; block; protocol} =
  Format.sprintf
    "  genesis:\n    timestamp: \"%s\"\n    block: \"%s\"\n    protocol: %s\n"
    timestamp
    block
    protocol

let genesis_encoding =
  let open Data_encoding in
  conv
    (fun {timestamp; block; protocol} -> (timestamp, block, protocol))
    (fun (timestamp, block, protocol) -> {timestamp; block; protocol})
    (obj3 (req "timestamp" string) (req "block" string) (req "protocol" string))

let values_encoding =
  let open Data_encoding in
  conv
    (fun {genesis_pubkey} -> genesis_pubkey)
    (fun genesis_pubkey -> {genesis_pubkey})
    (obj1 (req "genesis_pubkey" string))

let genesis_parameters_encoding =
  let open Data_encoding in
  conv
    (fun {values} -> values)
    (fun values -> {values})
    (obj1 (req "values" values_encoding))

let network_encoding =
  let open Data_encoding in
  conv
    (fun {genesis; _genesis_parameters; chain_name; _sandboxed_chain_name} ->
      (genesis, _genesis_parameters, chain_name, _sandboxed_chain_name))
    (fun (genesis, _genesis_parameters, chain_name, _sandboxed_chain_name) ->
      {genesis; _genesis_parameters; chain_name; _sandboxed_chain_name})
    (obj4
       (req "genesis" genesis_encoding)
       (req "genesis_parameters" genesis_parameters_encoding)
       (req "chain_name" string)
       (req "sandboxed_chain_name" string))

let input_encoding =
  let open Data_encoding in
  conv
    (fun {_data_dir; network} -> (_data_dir, network))
    (fun (_data_dir, network) -> {_data_dir; network})
    (obj2 (req "data-dir" string) (req "network" network_encoding))

let network_config_file = "config.json"

let output_file = "network_config_template.yaml"

(* Function that transforms the "config.json" file generated by the
    [generate_network_configuration] function into a usable format for the
    "core-blockchain-replay/charts/tezos/values.yaml" file.

    Example:
    - input:
    { "data-dir": "output_dir/",
      "network":
        { "genesis":
            { "timestamp": "2023-08-23T10:37:01Z",
              "block": "BLockGenesisGenesisGenesisGenesisGenesisf2beagLksYX",
              "protocol": "Ps9mPmXaRzmzk35gbAYNCAw6UXdE2qoABTHbN2oEEc1qM7CwT9P" },
          "genesis_parameters":
            { "values":
                { "genesis_pubkey":
                    "edpktzK4MHMjykndRsqs7SyXgP9WgJtM6LRKMVrz1BGpaAmncRBcSS" } },
          "chain_name": "TEZOS_SKYNET",
          "sandboxed_chain_name": "TEZOS_SKYNET_SANDBOXED" } }

    - output:
    node_config_network:
      chain_name: "TEZOS_SKYNET"
      genesis:
        timestamp: "2023-08-23T10:37:01Z"
        block: "BLockGenesisGenesisGenesisGenesisGenesisf2beagLksYX"
        protocol: Ps9mPmXaRzmzk35gbAYNCAw6UXdE2qoABTHbN2oEEc1qM7CwT9P
      activation_account_name: baker_0 *)
let format_network_configuration client_dir =
  let input_file = Filename.concat client_dir network_config_file in
  let* json =
    if Sys.file_exists input_file then Lwt_utils_unix.Json.read_file input_file
    else Test.fail "The %s file does not exist." input_file
  in
  let json_encoding =
    match json with
    | Ok json_encoding -> json_encoding
    | _ -> Test.fail "Wrong input file."
  in
  let network =
    (Data_encoding.Json.destruct input_encoding json_encoding).network
  in
  let {genesis; _genesis_parameters; chain_name; _sandboxed_chain_name} =
    network
  in
  let output =
    "node_config_network:\n"
    ^ format_chain_name chain_name
    ^ format_genesis genesis ^ default_entries
  in
  let* res =
    Lwt_utils_unix.with_atomic_open_out
      ~overwrite:true
      (Filename.concat client_dir output_file)
    @@ fun chan -> Lwt_utils_unix.write_string chan output
  in
  match res with
  | Ok () -> Lwt.return_unit
  | Error _ -> Test.fail "Failed to write to output directory."
