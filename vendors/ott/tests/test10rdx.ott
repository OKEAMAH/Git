metavar x ::=   {{ com  term variable }} {{ lex alphanum}}
                {{ tex \mathit{[[x]]} }} 

metavar number ::= {{ phantom }}

indexvar n ::=

grammar
e :: '' ::=                               {{ com term    }}
  | e e'         ::   :: app                   {{ com app     }}
  | \ x . e      ::   :: lam   (+ bind x in e +) {{ com lambda  }}
  | x            ::   :: var                   {{ com variable}}
  | number       ::   :: number                {{ com number  }}
  | amb e1 .. en ::   :: amb                   {{ com amb }}
  | + e1 .. en   ::   :: add                   {{ com add }}
  | if e1 e2 e3  ::   :: if                    {{ com if_then_else }}
  | fix e        ::   :: fix                   {{ com fix }}

  | ( e )        :: S :: eparen                 {{ rdx [[e]] }}
  | { e / x } e' :: M :: sub                    {{ rdx XXX }}  
                          
t :: '' ::=                                           {{ com type }}
  | num                 ::   :: num                     {{ com numbers }}
  | t -> t'             ::   :: arrow                   {{ com function }}
  | ( t )               :: S :: tparen                  {{ rdx [[t]] }} 

 G {{ tex \Gamma }} :: '' ::=       {{ com type environment }}
    | empty               ::   :: empty
    | G , x : t           ::   :: cons   


% val,v :: 'v_' ::=                            {{ com value   }}
%   | \ x . t      ::   :: lam                   {{ com lambda  }}

terminals :: 'terminals_' ::=
  | \                   ::   :: lambda     {{ tex \lambda }}
  | -->                 ::   :: red        {{ tex \longrightarrow }}
  |  ->                 ::   :: arrow      {{ tex \rightarrow }}
  | |-                  ::   :: turnstile  {{ tex \vdash }}
  | in                  ::   :: in         {{ tex \in }}

% subrules
%   val <:: term

% substitutions
%   single term var :: tsubst 


formula :: formula_ ::=  
  | judgement              ::  :: judgement
  | formula1 .. formulan   :: :: dots
  | x1 != x2               ::  :: diff_var {{ rdx (side-condition (different[[x1]][[x2]]))}}
  
embed
{{ rdx

(define-metafunction L
  [(different x_1 x_1) #f]
  [(different x_1 x_2) #t]) }}


defns
  Jtype :: '' ::= 

defn
    G |- e : t :: :: types :: types {{ rdx-mode I I O }}
  by
        
    -------------- :: value_name_found
    G,x:t |- x:t


    x1 != x2
    G |- x2:t
    -------------- :: value_name_not_found
    G,x1:t |- x2:t


    --------------- :: number
    G |- number:num


    G |- e1 : t1->t2
    G |- e2 : t1 
    ---------------- :: apply
    G |- e1 e2 : t2


    G,x:t1 |- e : t2
    ------------------ :: lambda
    G |- \x.e : t1->t2


G |- e1:num .. G |- en:num
------------------------------ :: add
G |- + e1 .. en : num





% defns
%  Jop :: '' ::=

% defn
%  e1 --> e2 :: ::reduce::'' {{ com [[e1]] reduces to [[e2]] }}  by


%     --------------------------  :: ax_app
%     (\x.e1) e2 -->  {e2/x}e1

%     e1 --> e1'
%     -------------- :: ctx_app_fun
%     e1 e --> e1' e

%     e1 --> e1'
%     -------------- :: ctx_app_arg
%     e e1 --> e e1'


