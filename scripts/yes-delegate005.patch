diff --git a/src/proto_alpha/lib_delegate/client_baking_forge.ml b/src/proto_alpha/lib_delegate/client_baking_forge.ml
index e81974640..e18a9c515 100644
--- a/src/proto_alpha/lib_delegate/client_baking_forge.ml
+++ b/src/proto_alpha/lib_delegate/client_baking_forge.ml
@@ -105,14 +105,14 @@ let forge_block_header
     (cctxt : #Alpha_client_context.full)
     ~chain
     block
-    delegate_sk
+    delegate_pkh
     shell
-    priority
+    _priority
     seed_nonce_hash =
   Client_baking_pow.mine
     cctxt chain block shell
     (fun proof_of_work_nonce ->
-       { Block_header.priority ;
+       { Block_header.priority = 0 ;
          seed_nonce_hash ;
          proof_of_work_nonce ;
        }) >>=? fun contents ->
@@ -120,8 +120,8 @@ let forge_block_header
     Data_encoding.Binary.to_bytes_exn
       Alpha_context.Block_header.unsigned_encoding
       (shell, contents) in
-  Shell_services.Chain.chain_id cctxt ~chain () >>=? fun chain_id ->
-  Client_keys.append cctxt delegate_sk ~watermark:(Block_header chain_id) unsigned_header
+  let signature = Signature.fake_sign delegate_pkh unsigned_header in
+  return (MBytes.concat "" [ unsigned_header ; Signature.to_bytes signature ])
 
 let forge_faked_protocol_data ~priority ~seed_nonce_hash =
   Alpha_context.Block_header.{
@@ -159,13 +159,13 @@ let inject_block
     ~shell_header
     ~priority
     ~delegate_pkh
-    ~delegate_sk
+    ~delegate_sk:_
     ~level
     operations =
   assert_valid_operations_hash shell_header operations >>=? fun () ->
   let block = `Hash (shell_header.Tezos_base.Block_header.predecessor, 0) in
   forge_block_header cctxt ~chain block
-    delegate_sk shell_header priority seed_nonce_hash >>=? fun signed_header ->
+    delegate_pkh shell_header priority seed_nonce_hash >>=? fun signed_header ->
   (* Record baked blocks to prevent double baking  *)
   let open Client_baking_highwatermarks in
   cctxt#with_lock begin fun () ->
@@ -1017,16 +1017,14 @@ let bake (cctxt : #Alpha_client_context.full) ~chain state =
 (** [get_baking_slots] calls the node via RPC to retrieve the potential
     slots for the given delegates within a given range of priority *)
 let get_baking_slots cctxt
-    ?(max_priority = default_max_priority)
+    ?max_priority:_
     new_head
-    delegates =
+    _delegates =
   let chain = `Hash new_head.Client_baking_blocks.chain_id in
   let block = `Hash (new_head.hash, 0) in
-  let level = Raw_level.succ new_head.level in
+  let _level = Raw_level.succ new_head.level in
   Alpha_services.Delegate.Baking_rights.get cctxt
-    ~max_priority
-    ~levels:[ level ]
-    ~delegates
+    ~max_priority:1
     (chain, block) >>= function
   | Error errs ->
       lwt_log_error Tag.DSL.(fun f ->
diff --git a/src/proto_alpha/lib_delegate/client_baking_lib.ml b/src/proto_alpha/lib_delegate/client_baking_lib.ml
index d46772f9d..cb9a1fe02 100644
--- a/src/proto_alpha/lib_delegate/client_baking_lib.ml
+++ b/src/proto_alpha/lib_delegate/client_baking_lib.ml
@@ -32,7 +32,7 @@ let bake_block
     ?minimal_nanotez_per_gas_unit
     ?minimal_nanotez_per_byte
     ?force
-    ?max_priority
+    ?max_priority:_
     ?(minimal_timestamp = false)
     ?mempool
     ?context_path
@@ -56,22 +56,31 @@ let bake_block
       Some seed_nonce, Some seed_nonce_hash
     else
       None, None in
-  let timestamp =
+  let _timestamp =
     if minimal_timestamp then
       None
     else
       Some Time.System.(to_protocol (Systime_os.now ())) in
+
+  Alpha_services.Delegate.Baking_rights.get cctxt
+    ~max_priority:1
+    (chain, head) >>= begin function
+    | Ok [Delegate_services.Baking_rights.{timestamp = Some timestamp ; delegate ; _ }] ->
+        return (timestamp, delegate)
+    | _ -> failwith "yes-baker: error"
+  end >>=? fun (timestamp, delegate) ->
+
   Client_baking_forge.forge_block cctxt
     ?force
     ?minimal_fees
     ?minimal_nanotez_per_gas_unit
     ?minimal_nanotez_per_byte
-    ?timestamp
+    ~timestamp
     ?seed_nonce_hash
     ?mempool
     ?context_path
     ~chain
-    ~priority:(`Auto (delegate, max_priority))
+    ~priority:(`Set 0)
     ~delegate_pkh:delegate
     ~delegate_sk:src_sk
     head >>=? fun block_hash ->
