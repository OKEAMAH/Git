// SPDX-FileCopyrightText: 2022-2023 TriliTech <contact@trili.tech>
// SPDX-FileCopyrightText: 2023 Functori <contact@functori.com>
//
// SPDX-License-Identifier: MIT

//! Handle details of EVM runtime
//!
//! The interface between SputnikVM and the kernel. This includes interface
//! to storage, account balances, block constants, _and transaction state_.

use crate::account_storage::{
    account_path, AccountStorageError, EthereumAccount, EthereumAccountStorage,
    CODE_HASH_DEFAULT,
};
use crate::storage;
use crate::transaction::TransactionContext;
use crate::EthereumError;
use crate::PrecompileSet;
use alloc::borrow::Cow;
use alloc::rc::Rc;
use core::convert::Infallible;
use debug::debug_msg;
use evm::executor::stack::Log;
use evm::gasometer::Gasometer;
use evm::{
    Capture, Config, Context, CreateScheme, ExitError, ExitFatal, ExitReason, ExitRevert,
    ExitSucceed, Handler, Opcode, Stack, Transfer,
};
use host::runtime::Runtime;
use primitive_types::{H160, H256, U256};
use sha3::{Digest, Keccak256};
use std::fmt::Debug;
use tezos_ethereum::block::BlockConstants;

/// Maximum transaction stack depth.
const MAXIMUM_TRANSACTION_DEPTH: usize = 1024_usize;

/// Outcome of making the [EvmHandler] run an Ethereum transaction
///
/// Be it contract -call, -create or simple transfer, the handler will update the world
/// state in durable storage _and_ produce a summary of the outcome that will be needed
/// for creating a transaction receipt.
///
/// A failed transaction will not refund gas. SputnikVM even treats some kinds of failure,
/// eg, logging during static call, as out-of-gas.
///
/// A _reverted_ transaction will refund gas, as execution continues as normal. It will
/// rollback transaction effect in the reverted sub-transaction, and it _can_ return data
/// (like as if it the call ended with a RETURN opcode).
#[derive(Debug, Eq, PartialEq)]
pub struct ExecutionOutcome {
    /// How much gas was used for processing an entire transaction.
    pub gas_used: u64,
    /// Whether the transaction succeeded or not.
    ///  - In case of transfer-, whether the funds were transferred
    ///  - In case of call-, whether toplevel call returned or stopped (success), or
    ///    something else (revert, invalid code, etc. are non-successes).
    ///  - In case of create-, whethere a new contract was created or not.
    pub is_success: bool,
    /// In case of create- transactions, this field contains address of the new contract
    pub new_address: Option<H160>,
    /// Logs generated by the transaction.
    pub logs: Vec<Log>,
    /// Result of the execution
    pub result: Option<Vec<u8>>,
}

/// The result of calling a contract as expected by the SputnikVM EVM implementation.
/// First part of the tuple tells Sputnik how the execution went (success or failure
/// and in what way). Second part tells Sputnik the return data if any.
type CallOutcome = (ExitReason, Vec<u8>);

/// The result of creating a contract as expected by the SputnikVM EVM implementation.
/// First part of the triple is the execution outcome - same as for normal contract
/// execution. Second part is the address of the newly created contract, if one was
/// created. Last part is the return value, which is required by Sputnik, but it is
/// always an empty vector when this type is used for create outcome.
///
/// Beware that this type is sometimes used as outcome of a _call_. This is simply to
/// be able to use the `end_xxx_transaction` functions for both contract -create and
/// -call. In this case, the last element of the triple can be non-empty, and the
/// address will be `None`.
type CreateOutcome = (ExitReason, Option<H160>, Vec<u8>);

/// Wrap ethereum errors in the SputnikVM errors
///
/// This function wraps critical errors that indicate something is wrong
/// with the kernel or rollup node into errors that can be passed on to
/// SputnikVM execution. This is needed if an error occurs in a callback
/// called by SputnikVM.
fn ethereum_error_to_exit_reason(exit_reason: EthereumError) -> ExitReason {
    ExitReason::Fatal(ExitFatal::Other(Cow::from(format!("{:?}", exit_reason))))
}

/// Data related to the current transaction layer
struct TransactionLayerData {
    /// Whether the current transaction is static or not, ie, if the
    /// transaction is allowed to update durable storage.
    pub is_static: bool,
    /// The log records gathered in this layer of transactions and any
    /// committed sub layers.
    pub logs: Vec<Log>,
    /// The addresses of contracts that have been deleted as part of
    /// the current transaction.
    pub deleted_contracts: Vec<H160>,
}

impl TransactionLayerData {
    /// Create the data associated with one layer of transactions -
    /// one Ethereum transaction context. It initially has no log
    /// records.
    pub fn new(is_static: bool) -> Self {
        TransactionLayerData {
            is_static,
            logs: vec![],
            deleted_contracts: vec![],
        }
    }
}

/// The implementation of the SputnikVM [Handler] trait
pub struct EvmHandler<'a, Host: Runtime> {
    /// The host
    host: &'a mut Host,
    /// The ethereum accounts storage
    evm_account_storage: &'a mut EthereumAccountStorage,
    /// The original caller initiating the toplevel transaction
    origin: H160,
    /// The constants for the current block
    pub block: &'a BlockConstants,
    /// The precompiled functions
    precompiles: &'a dyn PrecompileSet<Host>,
    /// The gasometer for measuring and keeping track of gas usage
    gasometer: Gasometer<'a>,
    /// The configuration, eg, London or Frontier for execution
    config: &'a Config,
    /// The contexts associated with transaction(s) currently in
    /// progress
    transaction_data: Vec<TransactionLayerData>,
}

#[allow(unused_variables)]
impl<'a, Host: Runtime> EvmHandler<'a, Host> {
    /// Create a new handler to suit a new, initial EVM call context
    pub fn new(
        host: &'a mut Host,
        evm_account_storage: &'a mut EthereumAccountStorage,
        origin: H160,
        block: &'a BlockConstants,
        config: &'a Config,
        precompiles: &'a dyn PrecompileSet<Host>,
        gas_limit: u64,
    ) -> Self {
        Self {
            host,
            evm_account_storage,
            origin,
            block,
            config,
            precompiles,
            gasometer: Gasometer::<'a>::new(gas_limit, config),
            transaction_data: vec![],
        }
    }

    /// Get the total amount of gas used for the duration of the handlers
    /// lifetime.
    pub fn gas_used(&self) -> u64 {
        self.gasometer.total_used_gas()
    }

    /// Returns true if there is a static transaction in progress, otherwise
    /// return false.
    fn is_static(&self) -> bool {
        self.transaction_data
            .last()
            .map(|data| data.is_static)
            .unwrap_or(false)
    }

    /// Execute a SputnikVM runtime with this handler
    fn execute(
        &mut self,
        runtime: &mut evm::Runtime,
    ) -> Result<ExitReason, EthereumError> {
        match runtime.run(self) {
            Capture::Exit(reason) => Ok(reason),
            Capture::Trap(_) => Err(EthereumError::InternalTrapError),
        }
    }

    fn create_address(&mut self, scheme: CreateScheme) -> H160 {
        match scheme {
            CreateScheme::Create2 {
                caller,
                code_hash,
                salt,
            } => {
                let mut hasher = Keccak256::new();
                hasher.update([0xff]);
                hasher.update(caller);
                hasher.update(salt);
                hasher.update(code_hash);
                H256::from_slice(hasher.finalize().as_slice()).into()
            }
            CreateScheme::Legacy { caller } => {
                let nonce = self.get_nonce(caller).unwrap_or(U256::zero());
                let mut stream = rlp::RlpStream::new_list(2);
                stream.append(&caller);
                stream.append(&nonce);
                H256::from_slice(Keccak256::digest(&stream.out()).as_slice()).into()
            }
            CreateScheme::Fixed(address) => address,
        }
    }

    /// Execute a transfer between two accounts
    ///
    /// In case the transfer succeeds, the function returns
    /// `Ok(ExitReason::Succeed(ExitSucceed::Returned))`. In case the
    /// transaction fails, but execution doesn't encounter non-contract or
    /// -account errors, it returns `Ok(ExitReason::Error(err))`, where `err`
    /// indicates what went wrong (insufficient balance, etc.). In case of
    /// critical errors in the rollup node or kernel, an `Err(err)` is returned,
    /// where `err` indicates what went wrong, eg, a storage error.
    fn execute_transfer(
        &mut self,
        from: H160,
        to: H160,
        value: U256,
        gas_limit: Option<u64>,
    ) -> Result<ExitReason, EthereumError> {
        debug_msg!(self.host, "Executing a transfer");

        // TODO let transfers cost gas
        // issue: https://gitlab.com/tezos/tezos/-/issues/5118

        if value == U256::zero() {
            // Nothing to transfer so succeeds by default
            Ok(ExitReason::Succeed(ExitSucceed::Returned))
        } else if let Some(mut from_account) = self.get_account(from) {
            let mut to_account = self.get_or_create_account(to)?;

            if from_account.balance_remove(self.host, value)? {
                to_account
                    .balance_add(self.host, value)
                    .map_err(EthereumError::from)?;
                Ok(ExitReason::Succeed(ExitSucceed::Returned))
            } else {
                debug_msg!(
                    self.host,
                    "Transaction failture - balance underflow on account {:?} - withdraw {:?}",
                    from_account,
                    value
                );

                Ok(ExitReason::Fatal(ExitFatal::CallErrorAsFatal(
                    ExitError::OutOfFund,
                )))
            }
        } else {
            debug_msg!(self.host, "'from' account {:?} is empty", from);
            // Accounts of zero balance by default, so this must be
            // an underflow.
            Ok(ExitReason::Error(ExitError::OutOfFund))
        }
    }

    /// Create a contract
    ///
    /// Performs the actual contract creation for both transactions initiated
    /// by external accounts and contract creation initiated through contract
    /// execution.
    fn execute_create(
        &mut self,
        caller: H160,
        scheme: CreateScheme,
        value: U256,
        initial_code: Vec<u8>,
        gas_limit: Option<u64>,
    ) -> Result<CreateOutcome, EthereumError> {
        debug_msg!(self.host, "Executing a contract create");

        let address = self.create_address(scheme);

        // TODO: mark `caller` and `address` as hot for gas calculation
        // issue: https://gitlab.com/tezos/tezos/-/issues/4866

        if self.evm_account_storage.stack_depth() >= MAXIMUM_TRANSACTION_DEPTH {
            return Ok((
                ExitReason::Fatal(ExitFatal::CallErrorAsFatal(ExitError::CallTooDeep)),
                None,
                vec![],
            ));
        }

        let context = Context {
            address,
            caller,
            apparent_value: value,
        };

        // TODO: check that target address isn't already in use (must contain no code and a zero
        // nonce)
        // issue: https://gitlab.com/tezos/tezos/-/issues/4865

        if let Err(error) = self.execute_transfer(caller, address, value, gas_limit) {
            debug_msg!(
                self.host,
                "Failed transfer for create, funds: {:?}, from: {:?}, to: {:?}",
                value,
                caller,
                address
            );
            return Err(error);
        }

        self.increment_nonce(caller)?;

        let mut runtime = evm::Runtime::new(
            Rc::new(initial_code),
            Rc::new(Vec::new()),
            context,
            self.config,
        );

        let result = self.execute(&mut runtime);

        // FIXME should only be succeed with return value
        // issue: https://gitlab.com/tezos/tezos/-/issues/4869
        if let Ok(ExitReason::Succeed(_)) = result {
            let code_out = runtime.machine().return_value();

            if self.deleted(address) {
                // The contract has been deleted, so the address is empty. However, after
                // creating the new contract, the _new_ contract isn't deleted.
                self.unmark_deletion(address);
            }

            self.set_contract_code(address, code_out)?;
        }

        Ok((result?, Some(address), vec![]))
    }

    /// Call a contract
    ///
    /// Perform the actual contract execution - works both for executing an
    /// Ethereum transaction as initiated by an external account or as aresult
    /// of any of the -CALL instructions.
    ///
    /// The outcome is encoded as a SputnikVM _Create_ outcome for easy transaction
    /// handling. The new address "field" in the triple is always `None`.
    #[allow(clippy::too_many_arguments)]
    fn execute_call(
        &mut self,
        address: H160,
        transfer: Option<Transfer>,
        input: Vec<u8>,
        gas_limit: Option<u64>,
        transaction_context: TransactionContext,
    ) -> Result<CreateOutcome, EthereumError> {
        debug_msg!(
            self.host,
            "Executing contract call at depth: {}",
            self.evm_account_storage.stack_depth()
        );

        if self.evm_account_storage.stack_depth() > MAXIMUM_TRANSACTION_DEPTH {
            debug_msg!(self.host, "Execution beyond the call limit of 1024");

            return Ok((
                ExitReason::Fatal(ExitFatal::CallErrorAsFatal(ExitError::CallTooDeep)),
                None,
                vec![],
            ));
        }

        // TODO: check gas
        // issue: https://gitlab.com/tezos/tezos/-/issues/5120

        // TODO: add transfer to gas (if it is there)
        // issue: https://gitlab.com/tezos/tezos/-/issues/5121

        // TODO: touch address - mark as hot for gas calculation
        // issue: https://gitlab.com/tezos/tezos/-/issues/4866

        if let Some(transfer) = transfer {
            match self.execute_transfer(
                transaction_context.context.caller,
                address,
                transfer.value,
                gas_limit,
            )? {
                r @ ExitReason::Fatal(_) => {
                    return Ok((r, None, vec![]));
                }
                r @ ExitReason::Error(_) => {
                    return Ok((r, None, vec![]));
                }
                r @ ExitReason::Revert(_) => {
                    // A transfer cannot revert - this implies internal error in
                    // EVM execution
                    return Err(EthereumError::InconsistentState(Cow::from(
                        "Transfer returned revert",
                    )));
                }
                ExitReason::Succeed(_) => {
                    // Otherwise result is ok and we do nothing and continue
                }
            }
        }

        self.increment_nonce(transaction_context.context.caller)?;

        if let Some(precompile_result) = self.precompiles.execute(
            self,
            address,
            &input,
            gas_limit,
            &transaction_context.context,
            self.is_static(),
        ) {
            match precompile_result {
                Ok(precompile_output) => Ok((
                    ExitReason::Succeed(precompile_output.exit_status),
                    None,
                    precompile_output.output,
                )),
                Err(e) => Err(EthereumError::PrecompileFailed(e)),
            }
        } else if !self.deleted(address) {
            let code = self.code(address);

            let mut runtime = evm::Runtime::new(
                Rc::new(code),
                Rc::new(input),
                transaction_context.context,
                self.config,
            );

            let result = self.execute(&mut runtime);

            return Ok((result?, None, runtime.machine().return_value()));
        } else {
            // Contract must be empty since it was deleted, so there are no
            // instructions to run.
            return Ok((ExitReason::Succeed(ExitSucceed::Stopped), None, vec![]));
        }
    }

    /// Perform a contract call transaction
    pub fn call_contract(
        &mut self,
        caller: H160,
        callee: H160,
        value: Option<U256>,
        input: Vec<u8>,
        gas_limit: Option<u64>,
        is_static: bool,
    ) -> Result<ExecutionOutcome, EthereumError> {
        self.begin_initial_transaction(is_static)?;

        let result = self.execute_call(
            callee,
            value.map(|value| Transfer {
                source: caller,
                target: callee,
                value,
            }),
            input,
            gas_limit,
            TransactionContext::new(caller, callee, value.unwrap_or(U256::zero())),
        );

        self.end_initial_transaction(result)
    }

    /// Perform a create-contract transaction
    pub fn create_contract(
        &mut self,
        caller: H160,
        value: Option<U256>,
        input: Vec<u8>,
        gas_limit: Option<u64>,
    ) -> Result<ExecutionOutcome, EthereumError> {
        self.begin_initial_transaction(false)?;

        let default_create_scheme = CreateScheme::Legacy { caller };

        let result = self.execute_create(
            caller,
            default_create_scheme,
            value.unwrap_or(U256::zero()),
            input,
            gas_limit,
        );

        self.end_initial_transaction(result)
    }

    /// Perform a transfer transaction
    pub fn transfer(
        &mut self,
        from: H160,
        to: H160,
        value: U256,
        gas_limit: Option<u64>,
    ) -> Result<ExecutionOutcome, EthereumError> {
        self.begin_initial_transaction(false)?;

        self.increment_nonce(from)?;

        // TODO gas cost - it costs a fixed amount transferring funds

        let transfer_cost = self.config.gas_transaction_call;

        let gas_result = self.gasometer.record_cost(transfer_cost);

        let tx_result = match gas_result {
            Ok(()) => Ok((
                self.execute_transfer(from, to, value, gas_limit)?,
                None,
                vec![],
            )),
            Err(err) => Ok((ExitReason::Error(err), None, vec![])),
        };

        self.end_initial_transaction(tx_result)
    }

    fn get_or_create_account(
        &self,
        address: H160,
    ) -> Result<EthereumAccount, EthereumError> {
        self.evm_account_storage
            .get_or_create(
                self.host,
                &account_path(&address).map_err(AccountStorageError::from)?,
            )
            .map_err(EthereumError::from)
    }

    fn get_account(&self, address: H160) -> Option<EthereumAccount> {
        // Note: if we get an error we cannot report this to SputnikVM as the return types
        // for functions that use _this_ function don't support errors. Rather than do
        // error handling in all those functions (and those we'll write in the future), we
        // do the error handling here.
        if let Ok(path) = account_path(&address) {
            self.evm_account_storage
                .get(self.host, &path)
                .ok()
                .flatten()
        } else {
            debug_msg!(
                self.host,
                "Failed to get account path for EVM handler get_account"
            );
            None
        }
    }

    fn get_original_account(&self, address: H160) -> Option<EthereumAccount> {
        // Note, there is no way to recover from an error when creating the
        // account path. At this point we are being called from SputnikVM and
        // it does not allow for this to fail, so we just return None.
        if let Ok(path) = account_path(&address) {
            self.evm_account_storage
                .get_original(self.host, &path)
                .ok()
                .flatten()
        } else {
            debug_msg!(
                self.host,
                "Failed to get account path for EVM handler get_original_account"
            );
            None
        }
    }

    fn increment_nonce(&mut self, address: H160) -> Result<(), EthereumError> {
        match account_path(&address) {
            Ok(path) => {
                let mut account =
                    self.evm_account_storage.get_or_create(self.host, &path)?;
                account
                    .increment_nonce(self.host)
                    .map_err(EthereumError::from)
            }
            Err(err) => {
                debug_msg!(
                    self.host,
                    "Failed to increment nonce for account {:?}",
                    address
                );
                Err(EthereumError::from(AccountStorageError::from(err)))
            }
        }
    }

    fn set_contract_code(
        &mut self,
        address: H160,
        code: Vec<u8>,
    ) -> Result<(), EthereumError> {
        self.get_or_create_account(address)?
            .set_code(self.host, &code)
            .map_err(EthereumError::from)
    }

    fn get_nonce(&self, address: H160) -> Result<U256, EthereumError> {
        self.get_account(address)
            .map(|account| account.nonce(self.host).map_err(EthereumError::from))
            .unwrap_or(Ok(U256::zero()))
    }

    /// If a contract has been marked for deletion, and another contract is
    /// created in its place, we need to unmark it, so that we don't delete the
    /// new contract when we finalize the effects of the transactions.
    fn unmark_deletion(&mut self, address: H160) {
        for data in &mut self.transaction_data {
            data.deleted_contracts.retain(|a| *a != address);
        }
    }

    /// Completely delete an account including nonce, code, and data. This is for
    /// contract selfdestruct completion, ie, when contract selfdestructs takes final
    /// effect.
    fn delete_contract(&mut self, address: H160) -> Result<(), EthereumError> {
        debug_msg!(self.host, "Deleting contract at {:?}", address);

        self.evm_account_storage
            .delete(
                self.host,
                &account_path(&address).map_err(AccountStorageError::from)?,
            )
            .map_err(EthereumError::from)
    }

    /// Borrow a reference to the host - needed for eg precompiled contracts
    pub fn borrow_host(&mut self) -> &'_ mut Host {
        self.host
    }

    /// Begin the first transaction layer
    ///
    /// This requires that no other transaction is in progress. If there is a
    /// transaction in progress, then the function returns an error to report
    /// this.
    fn begin_initial_transaction(
        &mut self,
        is_static: bool,
    ) -> Result<(), EthereumError> {
        let current_depth = self.evm_account_storage.stack_depth();

        debug_msg!(
            self.host,
            "Begin initial transaction at transaction depth: {}",
            current_depth
        );

        if current_depth > 0 {
            debug_msg!(
                self.host,
                "Initial transaction when there is already {} transaction",
                current_depth
            );

            return Err(EthereumError::InconsistentTransactionStack(
                current_depth,
                true,
                true,
            ));
        }

        self.transaction_data
            .push(TransactionLayerData::new(self.is_static() || is_static));

        self.evm_account_storage
            .begin_transaction(self.host)
            .map_err(EthereumError::from)
    }

    /// Final commit of initial transaction
    ///
    /// This requires that only one transaction is in progress. Since we should
    /// never end in a state with a transaction in progress after we are done
    /// executing, such state is the sort of thing that may cause panic.
    fn commit_initial_transaction(
        &mut self,
        new_address: Option<H160>,
        result: Vec<u8>,
    ) -> Result<ExecutionOutcome, EthereumError> {
        let current_depth = self.evm_account_storage.stack_depth();

        debug_msg!(
            self.host,
            "Committing initial transaction. Level is {:?}",
            current_depth
        );

        if current_depth != 1 {
            debug_msg!(
                self.host,
                "Committing final transaction, but there are {:?} transactions",
                current_depth
            );

            return Err(EthereumError::InconsistentTransactionStack(
                current_depth,
                true,
                false,
            ));
        }

        if current_depth != self.transaction_data.len() {
            return Err(EthereumError::InconsistentTransactionData(
                current_depth,
                self.transaction_data.len(),
            ));
        }

        if let Some(last_layer) = self.transaction_data.pop() {
            self.evm_account_storage
                .commit_transaction(self.host)
                .map_err(EthereumError::from)?;

            Ok(ExecutionOutcome {
                gas_used: self.gas_used(),
                is_success: true,
                new_address,
                logs: last_layer.logs,
                result: Some(result),
            })
        } else {
            Err(EthereumError::InconsistentState(Cow::from(
                "The transaction data stack is empty when committing the initial transaction"
            )))
        }
    }

    /// Rollback of initial transaction
    ///
    /// This requires that only one transaction is in progress. Since we should
    /// never end in a state with a transaction in progress after we are done
    /// executing, such state is the sort of thing that may cause panic.
    fn rollback_initial_transaction(
        &mut self,
    ) -> Result<ExecutionOutcome, EthereumError> {
        let current_depth = self.evm_account_storage.stack_depth();

        debug_msg!(
            self.host,
            "Rolling back the initial transaction. Level is {:?}",
            current_depth
        );

        if current_depth != 1 {
            debug_msg!(
                self.host,
                "Rolling back initial transaction, but there are {:?} in progress",
                current_depth
            );

            return Err(EthereumError::InconsistentTransactionStack(
                current_depth,
                true,
                false,
            ));
        }

        if current_depth != self.transaction_data.len() {
            return Err(EthereumError::InconsistentTransactionData(
                current_depth,
                self.transaction_data.len(),
            ));
        }

        let gas_used = self.gas_used();

        self.evm_account_storage
            .rollback_transaction(self.host)
            .map_err(EthereumError::from)?;

        let _ = self.transaction_data.pop();

        Ok(ExecutionOutcome {
            gas_used,
            is_success: false,
            new_address: None,
            logs: vec![],
            result: None,
        })
    }

    /// End the initial transaction with either a commit or a rollback. The
    /// outcome depends on the execution result given.
    fn end_initial_transaction(
        &mut self,
        execution_result: Result<CreateOutcome, EthereumError>,
    ) -> Result<ExecutionOutcome, EthereumError> {
        match execution_result {
            Ok((ExitReason::Succeed(r), new_address, result)) => {
                debug_msg!(
                    self.host,
                    "The initial transaction ended with success: {:?}",
                    r
                );

                self.commit_initial_transaction(new_address, result)
            }
            Ok((ExitReason::Revert(ExitRevert::Reverted), _, _)) => {
                self.rollback_initial_transaction()
            }
            Ok((ExitReason::Error(error), _, _)) => {
                debug_msg!(
                    self.host,
                    "The initial transaction ended with an error: {:?}",
                    error
                );

                self.rollback_initial_transaction()
            }
            Ok((ExitReason::Fatal(ExitFatal::Other(cow_str)), _, _)) => {
                self.rollback_initial_transaction()?;
                Err(EthereumError::WrappedError(cow_str))
            }
            Ok((ExitReason::Fatal(fatal_error), _, _)) => {
                debug_msg!(
                    self.host,
                    "The initial transaction ended with a fatal error: {:?}",
                    fatal_error
                );

                self.rollback_initial_transaction()
            }
            Err(err) => {
                debug_msg!(
                    self.host,
                    "The initial transaction ended with an Ethereum error: {:?}",
                    err
                );

                self.rollback_initial_transaction()?;
                Err(err)
            }
        }
    }

    /// Begin an intermediate transaction
    fn begin_inter_transaction(&mut self, is_static: bool) -> Result<(), EthereumError> {
        let current_depth = self.evm_account_storage.stack_depth();

        debug_msg!(
            self.host,
            "Begin transaction at transaction depth: {}",
            current_depth
        );

        if current_depth == 0 {
            return Err(EthereumError::InconsistentTransactionStack(0, false, true));
        }

        self.transaction_data
            .push(TransactionLayerData::new(self.is_static() || is_static));

        self.evm_account_storage
            .begin_transaction(self.host)
            .map_err(EthereumError::from)
    }

    /// Commit an intermediate transaction
    fn commit_inter_transaction(&mut self) -> Result<(), EthereumError> {
        let current_depth = self.evm_account_storage.stack_depth();

        if current_depth < 2 {
            return Err(EthereumError::InconsistentTransactionStack(
                current_depth,
                false,
                false,
            ));
        }

        debug_msg!(
            self.host,
            "Commit transaction at transaction depth: {}",
            current_depth
        );

        self.evm_account_storage
            .commit_transaction(self.host)
            .map_err(EthereumError::from)?;

        if let Some(mut committed_data) = self.transaction_data.pop() {
            if let Some(top_layer) = self.transaction_data.last_mut() {
                top_layer
                    .logs
                    .try_reserve_exact(committed_data.logs.len())?;
                top_layer.logs.append(&mut committed_data.logs);

                top_layer
                    .deleted_contracts
                    .reserve(committed_data.deleted_contracts.len());
                top_layer
                    .deleted_contracts
                    .append(&mut committed_data.deleted_contracts);

                Ok(())
            } else {
                Err(EthereumError::InconsistentState(Cow::from(
                    "The transaction data stack is empty",
                )))
            }
        } else {
            Err(EthereumError::InconsistentState(Cow::from(
                "The transaction data stack is empty at commit",
            )))
        }
    }

    /// Rollback an intermediate transaction
    fn rollback_inter_transaction(&mut self) -> Result<(), EthereumError> {
        let current_depth = self.evm_account_storage.stack_depth();

        if current_depth < 2 {
            return Err(EthereumError::InconsistentTransactionStack(
                current_depth,
                false,
                false,
            ));
        }

        debug_msg!(
            self.host,
            "Rollback transaction at transaction depth: {}",
            current_depth
        );

        let _ = self.transaction_data.pop();

        self.evm_account_storage
            .rollback_transaction(self.host)
            .map_err(EthereumError::from)
    }

    /// End a transaction based on an execution result from a call to
    /// [execute]. This can be either a rollback or a commit depending
    /// on whether the execution was successful or not.
    ///
    /// This function applies _only_ to intermediate transactions. Calling
    /// it with only the initial transaction in progress is an error.
    fn end_inter_transaction<T>(
        &mut self,
        execution_result: Result<CreateOutcome, EthereumError>,
        promote_error: bool,
    ) -> Capture<CreateOutcome, T> {
        if let Ok((ref r @ ExitReason::Succeed(_), _, _)) = execution_result {
            debug_msg!(self.host, "Intermediate transaction ended with: {:?}", r);

            if let Err(err) = self.commit_inter_transaction() {
                debug_msg!(
                    self.host,
                    "Committing intermediate transaction caused an error: {:?}",
                    err
                );

                return Capture::Exit((ethereum_error_to_exit_reason(err), None, vec![]));
            }
        } else if let Err(err) = self.rollback_inter_transaction() {
            debug_msg!(
                self.host,
                "Intermediate transaction ended in error: {:?}",
                err
            );

            return Capture::Exit((ethereum_error_to_exit_reason(err), None, vec![]));
        }

        match execution_result {
            Ok((ExitReason::Error(err), _, _)) => {
                if promote_error {
                    Capture::Exit((
                        ExitReason::Fatal(ExitFatal::CallErrorAsFatal(err)),
                        None,
                        vec![],
                    ))
                } else {
                    Capture::Exit((ExitReason::Error(err), None, vec![]))
                }
            }
            Ok(res) => Capture::Exit(res),
            Err(err) => Capture::Exit((ethereum_error_to_exit_reason(err), None, vec![])),
        }
    }
}

#[allow(unused_variables)]
impl<'a, Host: Runtime> Handler for EvmHandler<'a, Host> {
    type CreateInterrupt = Infallible;
    type CreateFeedback = Infallible;
    type CallInterrupt = Infallible;
    type CallFeedback = Infallible;

    fn balance(&self, address: H160) -> U256 {
        self.get_account(address)
            .and_then(|a| a.balance(self.host).ok())
            .unwrap_or(U256::zero())
    }

    fn code_size(&self, address: H160) -> U256 {
        self.get_account(address)
            .and_then(|a| a.code_size(self.host).ok())
            .unwrap_or(U256::zero())
    }

    fn code_hash(&self, address: H160) -> H256 {
        self.get_account(address)
            .and_then(|a| a.code_hash(self.host).ok())
            .unwrap_or(CODE_HASH_DEFAULT)
    }

    fn code(&self, address: H160) -> Vec<u8> {
        // TODO: mark address as hot
        // issue: https://gitlab.com/tezos/tezos/-/issues/4866

        self.get_account(address)
            .and_then(|a| a.code(self.host).ok())
            .unwrap_or_default()
    }

    fn storage(&self, address: H160, index: H256) -> H256 {
        self.get_account(address)
            .and_then(|a| a.get_storage(self.host, &index).ok())
            .unwrap_or(H256::zero())
    }

    fn original_storage(&self, address: H160, index: H256) -> H256 {
        self.get_original_account(address)
            .and_then(|a| a.get_storage(self.host, &index).ok())
            .unwrap_or(H256::zero())
    }

    fn gas_left(&self) -> U256 {
        // TODO: https://gitlab.com/tezos/tezos/-/issues/5321
        // Use the gasometer to find amount of gas left for current execution
        U256::zero() // STUB
    }

    fn gas_price(&self) -> U256 {
        self.block.gas_price
    }

    fn origin(&self) -> H160 {
        self.origin
    }

    fn block_hash(&self, number: U256) -> H256 {
        storage::blocks::get_block_hash(self.host, number)
            .unwrap_or_else(|_| panic!("Block with number {} doesn't exist", number))
    }

    fn block_number(&self) -> U256 {
        self.block.number
    }

    fn block_coinbase(&self) -> H160 {
        self.block.coinbase
    }

    fn block_timestamp(&self) -> U256 {
        self.block.timestamp
    }

    fn block_difficulty(&self) -> U256 {
        self.block.difficulty
    }

    fn block_gas_limit(&self) -> U256 {
        self.block.gas_limit.into()
    }

    fn block_base_fee_per_gas(&self) -> U256 {
        self.block.base_fee_per_gas
    }

    fn chain_id(&self) -> U256 {
        self.block.chain_id
    }

    fn exists(&self, address: H160) -> bool {
        self.code_size(address) > U256::zero()
    }

    fn deleted(&self, address: H160) -> bool {
        for data in &self.transaction_data {
            if data.deleted_contracts.contains(&address) {
                return true;
            }
        }

        false
    }

    fn is_cold(&self, address: H160, index: Option<H256>) -> bool {
        // TODO: https://gitlab.com/tezos/tezos/-/issues/4866
        false // STUB until issue above has been fixed
    }

    fn set_storage(
        &mut self,
        address: H160,
        index: H256,
        value: H256,
    ) -> Result<(), ExitError> {
        let mut account = self.get_or_create_account(address).map_err(|_| {
            ExitError::Other(Cow::from("Could not get account for set_storage"))
        })?;
        account
            .set_storage(self.host, &index, &value)
            .map_err(|_| ExitError::Other(Cow::from("Could not set_storage in handler")))
    }

    fn log(
        &mut self,
        address: H160,
        topics: Vec<H256>,
        data: Vec<u8>,
    ) -> Result<(), ExitError> {
        if let Some(top_data) = self.transaction_data.last_mut() {
            top_data.logs.push(Log {
                address,
                topics,
                data,
            });
            Ok(())
        } else {
            Err(ExitError::Other(Cow::from("No transaction data for log")))
        }
    }

    fn mark_delete(&mut self, address: H160, target: H160) -> Result<(), ExitError> {
        let balance = self.balance(address);

        self.execute_transfer(address, target, balance, None)
            .map_err(|err| {
                ExitError::Other(Cow::from(
                    "Could not execute transfer on contract delete",
                ))
            })?;

        if let Some(top_data) = self.transaction_data.last_mut() {
            top_data.deleted_contracts.push(address);

            if self.delete_contract(address).is_err() {
                Err(ExitError::Other(Cow::from("Failed to delete contract")))
            } else {
                Ok(())
            }
        } else {
            Err(ExitError::Other(Cow::from(
                "No transaction data for delete",
            )))
        }
    }

    fn create(
        &mut self,
        caller: H160,
        scheme: CreateScheme,
        value: U256,
        init_code: Vec<u8>,
        target_gas: Option<u64>,
    ) -> Capture<CreateOutcome, Self::CreateInterrupt> {
        if let Err(err) = self.begin_inter_transaction(false) {
            Capture::Exit((
                ExitReason::Fatal(ExitFatal::Other(Cow::from(format!("{err:?}")))),
                None,
                vec![],
            ))
        } else {
            let result =
                self.execute_create(caller, scheme, value, init_code, target_gas);

            self.end_inter_transaction(result, false)
        }
    }

    fn call(
        &mut self,
        code_address: H160,
        transfer: Option<Transfer>,
        input: Vec<u8>,
        target_gas: Option<u64>,
        is_static: bool,
        context: Context,
    ) -> Capture<CallOutcome, Self::CallInterrupt> {
        if let Err(err) = self.begin_inter_transaction(is_static) {
            return Capture::Exit((ethereum_error_to_exit_reason(err), vec![]));
        }

        let result = self.execute_call(
            code_address,
            transfer,
            input,
            target_gas,
            TransactionContext::from_context(context),
        );

        match self.end_inter_transaction(result, true) {
            Capture::Exit((reason, _, value)) => {
                debug_msg!(self.host, "Call ended with reason: {:?}", reason);
                Capture::Exit((reason, value))
            }
            Capture::Trap(x) => Capture::Trap(x),
        }
    }

    fn pre_validate(
        &mut self,
        context: &Context,
        opcode: Opcode,
        stack: &Stack,
    ) -> Result<(), ExitError> {
        if let Some(cost) = evm::gasometer::static_opcode_cost(opcode) {
            self.gasometer.record_cost(cost)
        } else {
            let (cost, _target, memory_cost) = evm::gasometer::dynamic_opcode_cost(
                context.address,
                opcode,
                stack,
                self.is_static(),
                self.config,
                &self,
            )?;

            self.gasometer.record_dynamic_cost(cost, memory_cost)
        }
    }

    fn create_feedback(
        &mut self,
        _feedback: Self::CreateFeedback,
    ) -> Result<(), ExitError> {
        // TODO: issue: https://gitlab.com/tezos/tezos/-/issues/4872
        Ok(()) // this is a stub
    }
}

#[cfg(test)]
mod test {
    use super::*;
    use crate::account_storage::init_account_storage;
    use crate::precompiles;
    use evm::Config;
    use primitive_types::{H160, H256};
    use std::cmp::Ordering;
    use std::str::FromStr;
    use tezos_smart_rollup_mock::MockHost;

    fn set_code<'a>(
        handler: &mut EvmHandler<'a, MockHost>,
        address: &H160,
        code: Vec<u8>,
    ) {
        let mut account = handler.get_or_create_account(*address).unwrap();
        account.set_code(handler.borrow_host(), &code).unwrap();
    }

    fn get_balance<'a>(handler: &mut EvmHandler<'a, MockHost>, address: &H160) -> U256 {
        let account = handler.get_or_create_account(*address).unwrap();
        account.balance(handler.borrow_host()).unwrap()
    }

    fn set_balance<'a>(
        handler: &mut EvmHandler<'a, MockHost>,
        address: &H160,
        new_balance: U256,
    ) {
        let mut account = handler.get_or_create_account(*address).unwrap();
        let old_balance = account.balance(handler.borrow_host()).unwrap();
        match old_balance.cmp(&new_balance) {
            Ordering::Greater => {
                // we require that fund removal goes fine
                assert!(
                    account
                        .balance_remove(handler.borrow_host(), old_balance - new_balance)
                        .unwrap(),
                    "Could not set balance of account"
                )
            }
            Ordering::Less => account
                .balance_add(handler.borrow_host(), new_balance - old_balance)
                .unwrap(),
            Ordering::Equal => (),
        }
    }

    fn get_durable_slot<'a>(
        handler: &mut EvmHandler<'a, MockHost>,
        address: &H160,
        index: &H256,
    ) -> H256 {
        let account = handler.get_or_create_account(*address).unwrap();
        account.get_storage(handler.borrow_host(), index).unwrap()
    }

    #[test]
    fn legacy_create_to_correct_address() {
        let mut mock_runtime = MockHost::default();
        let block = BlockConstants::first_block();
        let precompiles = precompiles::precompile_set::<MockHost>();
        let mut evm_account_storage = init_account_storage().unwrap();
        let config = Config::london();
        let gas_limit = 1000_u64;

        // This is a randomly generated address. It has been used for testing legacy address
        // generation with zero nonce using Ethereum. To replicate (with new address):
        // - generate a fresh Ethereum account (on Rinkeby or other test net)
        // - make sure it has eth (transfer from faucet)
        // - check nonce is zero (or bump nonce accordingly below)
        // - create a new contract. Any contract will do.
        // - check address of new contract - it is `expected_result` below.
        let caller: H160 =
            H160::from_str("9bbfed6889322e016e0a02ee459d306fc19545d8").unwrap();

        let mut handler = EvmHandler::new(
            &mut mock_runtime,
            &mut evm_account_storage,
            caller,
            &block,
            &config,
            &precompiles,
            gas_limit,
        );

        let result = handler.create_address(CreateScheme::Legacy { caller });

        let expected_result: H160 =
            H160::from_str("43a61f3f4c73ea0d444c5c1c1a8544067a86219b").unwrap();

        assert_eq!(result, expected_result);
    }

    #[test]
    fn create2_to_correct_address() {
        let mut mock_runtime = MockHost::default();
        let block = BlockConstants::first_block();
        let precompiles = precompiles::precompile_set::<MockHost>();
        let mut evm_account_storage = init_account_storage().unwrap();
        let config = Config::london();
        let gas_limit = 1000_u64;
        let caller: H160 =
            H160::from_str("9bbfed6889322e016e0a02ee459d306fc19545d8").unwrap();

        let mut handler = EvmHandler::new(
            &mut mock_runtime,
            &mut evm_account_storage,
            caller,
            &block,
            &config,
            &precompiles,
            gas_limit,
        );

        let code_hash: H256 = CODE_HASH_DEFAULT;
        let salt: H256 = H256::zero();

        let result = handler.create_address(CreateScheme::Create2 {
            caller,
            code_hash,
            salt,
        });

        let expected_result: H160 =
            H160::from_str("0687a12da0ffa0a64a28c9512512b8ae8870b7ea").unwrap();

        assert_eq!(result, expected_result);
    }

    #[test]
    fn create2_to_correct_address_nonzero_salt() {
        let mut mock_runtime = MockHost::default();
        let block = BlockConstants::first_block();
        let precompiles = precompiles::precompile_set::<MockHost>();
        let mut evm_account_storage = init_account_storage().unwrap();
        let config = Config::london();
        let gas_limit = 1000_u64;
        let caller: H160 =
            H160::from_str("9bbfed6889322e016e0a02ee459d306fc19545d8").unwrap();

        let mut handler = EvmHandler::new(
            &mut mock_runtime,
            &mut evm_account_storage,
            caller,
            &block,
            &config,
            &precompiles,
            gas_limit,
        );

        let code_hash: H256 = CODE_HASH_DEFAULT;
        let salt: H256 = H256::from_str(
            "0000000000000000000000000000000000000000000000000000000000000001",
        )
        .unwrap();

        let result = handler.create_address(CreateScheme::Create2 {
            caller,
            code_hash,
            salt,
        });

        let expected_result: H160 =
            H160::from_str("dbd0b036a125995a83d0ab020656a8355abac612").unwrap();

        assert_eq!(result, expected_result);
    }

    #[test]
    fn origin_instruction_returns_origin_address() {
        let mut mock_runtime = MockHost::default();
        let block = BlockConstants::first_block();
        let precompiles = precompiles::precompile_set::<MockHost>();
        let mut evm_account_storage = init_account_storage().unwrap();
        let config = Config::london();
        let gas_limit = 1000_u64;
        let caller = H160::from_low_u64_be(28349_u64);

        // We use an origin distinct from caller for testing purposes
        let origin = H160::from_low_u64_be(117_u64);

        let mut handler = EvmHandler::new(
            &mut mock_runtime,
            &mut evm_account_storage,
            origin,
            &block,
            &config,
            &precompiles,
            gas_limit,
        );

        let address = H160::from_low_u64_be(213_u64);
        let input = vec![0_u8];
        let gas_limit: Option<u64> = None;
        let transaction_context = TransactionContext::new(caller, address, U256::zero());
        let transfer: Option<Transfer> = None;
        let code: Vec<u8> = vec![
            Opcode::ORIGIN.as_u8(), // Push the 32(!) byte origin on to stack (this is "the value")
            Opcode::PUSH1.as_u8(), // Push a zero valued word onto stack (this is "the address")
            0_u8,
            Opcode::MSTORE.as_u8(), // Store "the value" at "the address"
            Opcode::PUSH1.as_u8(),  // Push value 2 onto stack - this is "number of bytes"
            32_u8,
            Opcode::PUSH1.as_u8(), // Push value 0 onto stack - this is "the address" again
            0_u8,
            Opcode::RETURN.as_u8(), // Return "number of bytes" at "the address" in the RETURNBUFFER
        ];

        set_code(&mut handler, &address, code);

        let result = handler.execute_call(
            address,
            transfer,
            input,
            gas_limit,
            transaction_context,
        );

        match result {
            Ok(result) => {
                let expected_result = (
                    ExitReason::Succeed(ExitSucceed::Returned),
                    None,
                    H256::from(origin).0.to_vec(),
                );
                assert_eq!(result, expected_result);
                assert_eq!(handler.gas_used(), 17);
            }
            Err(err) => {
                panic!("Expected Ok, but got {:?}", err);
            }
        }
    }

    #[test]
    fn contract_call_produces_correct_output() {
        let mut mock_runtime = MockHost::default();
        let block = BlockConstants::first_block();
        let precompiles = precompiles::precompile_set::<MockHost>();
        let mut evm_account_storage = init_account_storage().unwrap();
        let config = Config::london();
        let gas_limit = 1000_u64;
        let caller = H160::from_low_u64_be(28349_u64);

        let mut handler = EvmHandler::new(
            &mut mock_runtime,
            &mut evm_account_storage,
            caller,
            &block,
            &config,
            &precompiles,
            gas_limit,
        );

        let address = H160::from_low_u64_be(213_u64);
        let input = vec![0_u8];
        let gas_limit: Option<u64> = None;
        let transaction_context = TransactionContext::new(caller, address, U256::zero());
        let transfer: Option<Transfer> = None;
        let code: Vec<u8> = vec![
            Opcode::PUSH32.as_u8(), // Push a 32 byte word onto stack (this is "the value")
            0xFF_u8,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            Opcode::PUSH1.as_u8(), // Push a zero valued word onto stack (this is "the address")
            0_u8,
            Opcode::MSTORE.as_u8(), // Store "the value" at "the address"
            Opcode::PUSH1.as_u8(),  // Push value 2 onto stack - this is "number of bytes"
            2_u8,
            Opcode::PUSH1.as_u8(), // Push value 0 onto stack - this is "the address" again
            0_u8,
            Opcode::RETURN.as_u8(), // Return "number of bytes" at "the address" in the RETURNBUFFER
        ];

        set_code(&mut handler, &address, code);

        let result = handler.execute_call(
            address,
            transfer,
            input,
            gas_limit,
            transaction_context,
        );

        match result {
            Ok(result) => {
                let expected_result = (
                    ExitReason::Succeed(ExitSucceed::Returned),
                    None,
                    vec![0xFF_u8, 0x01_u8],
                );
                assert_eq!(result, expected_result);
                assert_eq!(handler.gas_used(), 18);
            }
            Err(err) => {
                panic!("Expected Ok, but got {:?}", err);
            }
        }
    }

    // This test will fail because it blows the stack with the Rust default
    // stack size. This could be indication that we should do issue
    // https://gitlab.com/tezos/tezos/-/issues/4888
    // use RUST_MIN_STACK=<value> cargo test -p evm-kernel --features testing
    // with <value> set to 104857600 or something similar in size
    #[ignore]
    #[test]
    fn contract_call_fails_beyond_max_stack_depth() {
        let mut mock_runtime = MockHost::default();
        let block = BlockConstants::first_block();
        let precompiles = precompiles::precompile_set::<MockHost>();
        let mut evm_account_storage = init_account_storage().unwrap();
        let config = Config::london();
        let gas_limit = 1000_u64;
        let caller = H160::from_low_u64_be(2340);

        let mut handler = EvmHandler::new(
            &mut mock_runtime,
            &mut evm_account_storage,
            caller,
            &block,
            &config,
            &precompiles,
            gas_limit,
        );

        let input_value = U256::from(2026_u32);
        let mut input = [0_u8; 32];
        input_value.to_big_endian(&mut input);

        let address = H160::from_low_u64_be(118);
        let gas_limit: Option<u64> = Some(10_000_000_000_u64);
        let transaction_context = TransactionContext::new(caller, address, U256::zero());
        let transfer: Option<Transfer> = None;
        let code: Vec<u8> = vec![
            // get input data, subtract one and prepare as argument to nested call
            Opcode::PUSH1.as_u8(),
            1,
            Opcode::PUSH1.as_u8(),
            0, // call data offset
            Opcode::CALLDATALOAD.as_u8(),
            Opcode::SUB.as_u8(),
            // check if result is zero - if so, skip to return
            Opcode::DUP1.as_u8(),
            Opcode::ISZERO.as_u8(),
            Opcode::PUSH1.as_u8(),
            28_u8, // to JPMDEST
            Opcode::JUMPI.as_u8(),
            // store result in memory to use as call argument
            Opcode::PUSH1.as_u8(),
            0,
            Opcode::MSTORE.as_u8(),
            // set call parameters
            Opcode::PUSH1.as_u8(),
            0, // return size
            Opcode::PUSH1.as_u8(),
            0, // return offset
            Opcode::PUSH1.as_u8(),
            32_u8, // arg size
            Opcode::PUSH1.as_u8(),
            0, // arg offset
            Opcode::PUSH1.as_u8(),
            0,                       // value
            Opcode::ADDRESS.as_u8(), // address
            Opcode::PUSH1.as_u8(),
            0,                    // gas
            Opcode::CALL.as_u8(), // call self
            // when we get here we are done
            Opcode::JUMPDEST.as_u8(),
            Opcode::PUSH1.as_u8(),
            0, // return data size
            Opcode::PUSH1.as_u8(),
            0, // return data offset
            Opcode::RETURN.as_u8(),
        ];

        set_code(&mut handler, &address, code);

        let result = handler.execute_call(
            address,
            transfer,
            input.to_vec(),
            gas_limit,
            transaction_context,
        );

        match result {
            Ok(result) => {
                let expected_result = (
                    ExitReason::Fatal(ExitFatal::CallErrorAsFatal(
                        ExitError::CallTooDeep,
                    )),
                    None,
                    vec![],
                );
                assert_eq!(result, expected_result);
            }
            Err(err) => {
                panic!(
                    "Expected call to fail because of call depth, but got {:?}",
                    err
                );
            }
        }
    }

    // This test will fail because it blows the stack with the Rust default
    // stack size. This could be indication that we should do issue
    // https://gitlab.com/tezos/tezos/-/issues/4888
    // use RUST_MIN_STACK=<value> cargo test -p evm-kernel --features testing
    // with <value> set to 104857600 or something similar in size
    #[ignore]
    #[test]
    fn contract_call_succeeds_at_maximum_stack_depth() {
        let mut mock_runtime = MockHost::default();
        let block = BlockConstants::first_block();
        let precompiles = precompiles::precompile_set::<MockHost>();
        let mut evm_account_storage = init_account_storage().unwrap();
        let config = Config::london();
        let gas_limit = 1000_u64;
        let caller = H160::from_low_u64_be(8213);

        let mut handler = EvmHandler::new(
            &mut mock_runtime,
            &mut evm_account_storage,
            caller,
            &block,
            &config,
            &precompiles,
            gas_limit,
        );

        let input_value = U256::from(1025_u32); // transaction depth for contract below is callarg - 1
        let mut input = [0_u8; 32];
        input_value.to_big_endian(&mut input);

        let address = H160::from_low_u64_be(12389);
        let gas_limit: Option<u64> = None;
        let transaction_context = TransactionContext::new(caller, address, U256::zero());
        let transfer: Option<Transfer> = None;
        let code: Vec<u8> = vec![
            // get input data, subtract one and prepare as argument to nested call
            Opcode::PUSH1.as_u8(),
            1,
            Opcode::PUSH1.as_u8(),
            0, // call data offset
            Opcode::CALLDATALOAD.as_u8(),
            Opcode::SUB.as_u8(),
            // check if result is zero - if so, skip to return
            Opcode::DUP1.as_u8(),
            Opcode::ISZERO.as_u8(),
            Opcode::PUSH1.as_u8(),
            28_u8, // to JPMDEST
            Opcode::JUMPI.as_u8(),
            // store result in memory to use as call argument
            Opcode::PUSH1.as_u8(),
            0,
            Opcode::MSTORE.as_u8(),
            // set call parameters
            Opcode::PUSH1.as_u8(),
            0, // return size
            Opcode::PUSH1.as_u8(),
            0, // return offset
            Opcode::PUSH1.as_u8(),
            32_u8, // arg size
            Opcode::PUSH1.as_u8(),
            0, // arg offset
            Opcode::PUSH1.as_u8(),
            0,                       // value
            Opcode::ADDRESS.as_u8(), // address
            Opcode::PUSH1.as_u8(),
            0,                    // gas
            Opcode::CALL.as_u8(), // call self
            // when we get here we are done
            Opcode::JUMPDEST.as_u8(),
            Opcode::PUSH1.as_u8(),
            0, // return data size
            Opcode::PUSH1.as_u8(),
            0, // return data offset
            Opcode::RETURN.as_u8(),
        ];

        set_code(&mut handler, &address, code);

        let result = handler.execute_call(
            address,
            transfer,
            input.to_vec(),
            gas_limit,
            transaction_context,
        );

        match result {
            Ok(result) => {
                let expected_result =
                    (ExitReason::Succeed(ExitSucceed::Returned), None, vec![]);
                assert_eq!(result, expected_result);
                assert_eq!(handler.gas_used(), 5);
            }
            Err(err) => {
                panic!("Expected Ok, but got {:?}", err);
            }
        }
    }

    #[test]
    fn contract_can_use_durable_storage() {
        let mut mock_runtime = MockHost::default();
        let block = BlockConstants::first_block();
        let precompiles = precompiles::precompile_set::<MockHost>();
        let mut evm_account_storage = init_account_storage().unwrap();
        let config = Config::london();
        let gas_limit = 100000_u64;
        let caller = H160::from_low_u64_be(444);

        let mut handler = EvmHandler::new(
            &mut mock_runtime,
            &mut evm_account_storage,
            caller,
            &block,
            &config,
            &precompiles,
            gas_limit,
        );

        let address = H160::from_low_u64_be(312);
        let input: Vec<u8> = vec![0_u8];
        let gas_limit: Option<u64> = None;
        let transaction_context = TransactionContext::new(caller, address, U256::zero());
        let transfer: Option<Transfer> = None;
        let code: Vec<u8> = vec![
            Opcode::PUSH1.as_u8(),
            46_u8,
            Opcode::PUSH1.as_u8(),
            0_u8,
            Opcode::SSTORE.as_u8(),
            Opcode::PUSH1.as_u8(),
            0_u8,
            Opcode::SLOAD.as_u8(),
            Opcode::PUSH1.as_u8(),
            1_u8,
            Opcode::SLOAD.as_u8(),
            Opcode::PUSH1.as_u8(),
            0,
            Opcode::RETURN.as_u8(),
        ];

        set_code(&mut handler, &address, code);

        let result = handler.execute_call(
            address,
            transfer,
            input,
            gas_limit,
            transaction_context,
        );

        match result {
            Ok(result) => {
                let expected_result =
                    (ExitReason::Succeed(ExitSucceed::Returned), None, vec![]);
                assert_eq!(result, expected_result);
                let expected_in_storage = H256::from_str(
                    "000000000000000000000000000000000000000000000000000000000000002e",
                )
                .unwrap();
                assert_eq!(
                    get_durable_slot(&mut handler, &address, &H256::zero()),
                    expected_in_storage
                );
                assert_eq!(handler.gas_used(), 20215);
            }
            Err(err) => {
                panic!("Expected Ok, but got {:?}", err);
            }
        }
    }

    #[test]
    fn contract_create_can_use_durable_storage() {
        let mut mock_runtime = MockHost::default();
        let block = BlockConstants::first_block();
        let precompiles = precompiles::precompile_set::<MockHost>();
        let mut evm_account_storage = init_account_storage().unwrap();
        let config = Config::london();
        let gas_limit = 100000_u64;
        let caller = H160::from_low_u64_be(117);

        let mut handler = EvmHandler::new(
            &mut mock_runtime,
            &mut evm_account_storage,
            caller,
            &block,
            &config,
            &precompiles,
            gas_limit,
        );

        let gas_limit: Option<u64> = None;
        let value = U256::zero();
        let create_scheme = CreateScheme::Legacy { caller };
        let init_code: Vec<u8> = hex::decode("608060405234801561001057600080fd5b50602a600081905550610150806100286000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632e64cec11461003b5780636057361d14610059575b600080fd5b610043610075565b60405161005091906100a1565b60405180910390f35b610073600480360381019061006e91906100ed565b61007e565b005b60008054905090565b8060008190555050565b6000819050919050565b61009b81610088565b82525050565b60006020820190506100b66000830184610092565b92915050565b600080fd5b6100ca81610088565b81146100d557600080fd5b50565b6000813590506100e7816100c1565b92915050565b600060208284031215610103576101026100bc565b5b6000610111848285016100d8565b9150509291505056fea26469706673582212204d6c1853cec27824f5dbf8bcd0994714258d22fc0e0dc8a2460d87c70e3e57a564736f6c63430008120033").unwrap();

        let expected_address = handler.create_address(create_scheme);

        let result =
            handler.execute_create(caller, create_scheme, value, init_code, gas_limit);

        match result {
            Ok(result) => {
                let expected_result = (
                    ExitReason::Succeed(ExitSucceed::Returned),
                    Some(expected_address),
                    vec![],
                );
                assert_eq!(result, expected_result);
                assert_eq!(get_durable_slot(&mut handler, &expected_address, &H256::zero()), H256::from_str("000000000000000000000000000000000000000000000000000000000000002a").unwrap());
                assert_eq!(handler.gas_used(), 20131);
            }
            Err(err) => {
                panic!("Expected Ok, but got {:?}", err);
            }
        }
    }

    #[test]
    fn contract_call_does_transfer() {
        let mut mock_runtime = MockHost::default();
        let block = BlockConstants::first_block();
        let precompiles = precompiles::precompile_set::<MockHost>();
        let mut evm_account_storage = init_account_storage().unwrap();
        let config = Config::london();
        let gas_limit = 1000_u64;
        let caller = H160::from_low_u64_be(118);

        let mut handler = EvmHandler::new(
            &mut mock_runtime,
            &mut evm_account_storage,
            caller,
            &block,
            &config,
            &precompiles,
            gas_limit,
        );

        let address = H160::from_low_u64_be(117);
        let input = vec![0_u8];
        let gas_limit: Option<u64> = None;
        let transaction_context =
            TransactionContext::new(caller, address, U256::from(50_u32));
        let transfer: Option<Transfer> = Some(Transfer {
            source: caller,
            target: address,
            value: U256::from(100_u32),
        });
        let code: Vec<u8> = vec![
            Opcode::PUSH1.as_u8(),
            0u8,
            Opcode::PUSH1.as_u8(),
            0u8,
            Opcode::RETURN.as_u8(),
        ];

        set_code(&mut handler, &address, code);
        set_balance(&mut handler, &caller, U256::from(101_u32));

        let result = handler.execute_call(
            address,
            transfer,
            input,
            gas_limit,
            transaction_context,
        );

        match result {
            Ok(result) => {
                let expected_result =
                    (ExitReason::Succeed(ExitSucceed::Returned), None, vec![]);
                assert_eq!(result, expected_result);
                assert_eq!(get_balance(&mut handler, &address), U256::from(100_u32));
                assert_eq!(get_balance(&mut handler, &caller), U256::from(1_u32));
                assert_eq!(handler.gas_used(), 6);
            }
            Err(err) => {
                panic!("Expected Ok, but got {:?}", err);
            }
        }
    }

    #[test]
    fn contract_call_fails_when_insufficient_funds_for_transfer() {
        let mut mock_runtime = MockHost::default();
        let block = BlockConstants::first_block();
        let precompiles = precompiles::precompile_set::<MockHost>();
        let mut evm_account_storage = init_account_storage().unwrap();
        let config = Config::london();
        let gas_limit = 1000_u64;
        let caller = H160::from_low_u64_be(523_u64);

        let mut handler = EvmHandler::new(
            &mut mock_runtime,
            &mut evm_account_storage,
            caller,
            &block,
            &config,
            &precompiles,
            gas_limit,
        );

        let address = H160::from_low_u64_be(210_u64);
        let input = vec![0_u8];
        let gas_limit: Option<u64> = None;
        let transaction_context = TransactionContext::new(caller, address, U256::zero());
        let transfer: Option<Transfer> = Some(Transfer {
            source: caller,
            target: address,
            value: U256::from(100_u32),
        });
        let code: Vec<u8> = vec![
            Opcode::PUSH1.as_u8(),
            0u8,
            Opcode::PUSH1.as_u8(),
            0u8,
            Opcode::RETURN.as_u8(),
        ];

        set_code(&mut handler, &address, code);
        set_balance(&mut handler, &caller, U256::from(99_u32));

        let result = handler.execute_call(
            address,
            transfer,
            input,
            gas_limit,
            transaction_context,
        );

        match result {
            Ok(result) => {
                let expected_result = (
                    ExitReason::Fatal(ExitFatal::CallErrorAsFatal(ExitError::OutOfFund)),
                    None,
                    vec![],
                );
                assert_eq!(result, expected_result);
                assert_eq!(get_balance(&mut handler, &caller), U256::from(99_u32));
                assert_eq!(get_balance(&mut handler, &address), U256::zero());
                assert_eq!(handler.gas_used(), 0);
            }
            Err(err) => {
                panic!("Unexpected error: {:?}", err);
            }
        }
    }

    #[test]
    fn revert_can_return_a_value() {
        let mut mock_runtime = MockHost::default();
        let block = BlockConstants::first_block();
        let precompiles = precompiles::precompile_set::<MockHost>();
        let mut evm_account_storage = init_account_storage().unwrap();
        let config = Config::london();
        let gas_limit = 1000_u64;
        let caller = H160::from_low_u64_be(523_u64);

        let mut handler = EvmHandler::new(
            &mut mock_runtime,
            &mut evm_account_storage,
            caller,
            &block,
            &config,
            &precompiles,
            gas_limit,
        );

        let address = H160::from_low_u64_be(210_u64);
        let input = vec![0_u8];
        let gas_limit: Option<u64> = None;
        let transaction_context = TransactionContext::new(caller, address, U256::zero());
        let transfer: Option<Transfer> = None;

        let code: Vec<u8> = vec![
            Opcode::PUSH8.as_u8(), // push value of return data
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            Opcode::PUSH1.as_u8(), // push address of return data
            0,
            Opcode::MSTORE.as_u8(), // store return data in memory
            Opcode::PUSH1.as_u8(),  // push size of return data
            8,
            Opcode::PUSH1.as_u8(), // push offset in memory of return data
            24,
            Opcode::REVERT.as_u8(),
        ];

        set_code(&mut handler, &address, code);
        set_balance(&mut handler, &caller, U256::from(99_u32));

        let result = handler.execute_call(
            address,
            transfer,
            input,
            gas_limit,
            transaction_context,
        );

        match result {
            Ok(result) => {
                let expected_result = (
                    ExitReason::Revert(ExitRevert::Reverted),
                    None,
                    vec![0, 1, 2, 3, 4, 5, 6, 7],
                );
                assert_eq!(expected_result, result);
            }
            Err(err) => {
                panic!("Unexpected error: {:?}", err);
            }
        }
    }
}
