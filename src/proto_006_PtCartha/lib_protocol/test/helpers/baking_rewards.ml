(*****************************************************************************)
(*                                                                           *)
(* Open Source License                                                       *)
(* Copyright (c) 2019 Nomadic Labs, <contact@nomadic-labs.com>               *)
(* Copyright (c) 2019 Cryptium Labs <hello@cryptium.ch>                      *)
(*                                                                           *)
(* Permission is hereby granted, free of charge, to any person obtaining a   *)
(* copy of this software and associated documentation files (the "Software"),*)
(* to deal in the Software without restriction, including without limitation *)
(* the rights to use, copy, modify, merge, publish, distribute, sublicense,  *)
(* and/or sell copies of the Software, and to permit persons to whom the     *)
(* Software is furnished to do so, subject to the following conditions:      *)
(*                                                                           *)
(* The above copyright notice and this permission notice shall be included   *)
(* in all copies or substantial portions of the Software.                    *)
(*                                                                           *)
(* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR*)
(* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  *)
(* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL   *)
(* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER*)
(* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING   *)
(* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER       *)
(* DEALINGS IN THE SOFTWARE.                                                 *)
(*                                                                           *)
(*****************************************************************************)

(** The tables are precomputed using this the following formulas:

  let ( -- ) i j = List.init (j - i + 1) (fun x -> x + i)

  let baking_rewards =
    let reward p e =
      let r = 16_000_000. *. (0.8 +. 0.2 *. (float_of_int e) /. 32.)
              /. (float_of_int (p + 1)) in
      Float.to_int (floor r) in

    let ps = 0 -- 4 in
    let es = 0 -- 32 in

    List.map (fun p ->
      List.map (fun e ->
        reward p e
      ) es |> Array.of_list
    ) ps |> Array.of_list


  let endorsing_rewards =
    let reward p e =
      let r = 2_000_000. *. (float_of_int e)
              /. (float_of_int (p + 1)) in
      Float.to_int (floor r) in

    let ps = 0 -- 4 in
    let es = 0 -- 32 in

    List.map (fun p ->
      List.map (fun e ->
        reward p e
      ) es |> Array.of_list
    ) ps |> Array.of_list

  *)

let baking_rewards : int array array =
  [| [| 12800000;
        12900000;
        13000000;
        13100000;
        13200000;
        13300000;
        13400000;
        13500000;
        13600000;
        13700000;
        13800000;
        13900000;
        14000000;
        14100000;
        14200000;
        14300000;
        14400000;
        14500000;
        14600000;
        14700000;
        14800000;
        14900000;
        15000000;
        15100000;
        15200000;
        15300000;
        15400000;
        15500000;
        15600000;
        15700000;
        15800000;
        15900000;
        16000000 |];
     [| 6400000;
        6450000;
        6500000;
        6550000;
        6600000;
        6650000;
        6700000;
        6750000;
        6800000;
        6850000;
        6900000;
        6950000;
        7000000;
        7050000;
        7100000;
        7150000;
        7200000;
        7250000;
        7300000;
        7350000;
        7400000;
        7450000;
        7500000;
        7550000;
        7600000;
        7650000;
        7700000;
        7750000;
        7800000;
        7850000;
        7900000;
        7950000;
        8000000 |];
     [| 4266666;
        4300000;
        4333333;
        4366666;
        4400000;
        4433333;
        4466666;
        4500000;
        4533333;
        4566666;
        4600000;
        4633333;
        4666666;
        4700000;
        4733333;
        4766666;
        4800000;
        4833333;
        4866666;
        4900000;
        4933333;
        4966666;
        5000000;
        5033333;
        5066666;
        5100000;
        5133333;
        5166666;
        5200000;
        5233333;
        5266666;
        5300000;
        5333333 |];
     [| 3200000;
        3225000;
        3250000;
        3275000;
        3300000;
        3325000;
        3350000;
        3375000;
        3400000;
        3425000;
        3450000;
        3475000;
        3500000;
        3525000;
        3550000;
        3575000;
        3600000;
        3625000;
        3650000;
        3675000;
        3700000;
        3725000;
        3750000;
        3775000;
        3800000;
        3825000;
        3850000;
        3875000;
        3900000;
        3925000;
        3950000;
        3975000;
        4000000 |];
     [| 2560000;
        2580000;
        2600000;
        2620000;
        2640000;
        2660000;
        2680000;
        2700000;
        2720000;
        2740000;
        2760000;
        2780000;
        2800000;
        2820000;
        2840000;
        2860000;
        2880000;
        2900000;
        2920000;
        2940000;
        2960000;
        2980000;
        3000000;
        3020000;
        3040000;
        3060000;
        3080000;
        3100000;
        3120000;
        3140000;
        3160000;
        3180000;
        3200000 |] |]

let endorsing_rewards : int array array =
  [| [| 0;
        2000000;
        4000000;
        6000000;
        8000000;
        10000000;
        12000000;
        14000000;
        16000000;
        18000000;
        20000000;
        22000000;
        24000000;
        26000000;
        28000000;
        30000000;
        32000000;
        34000000;
        36000000;
        38000000;
        40000000;
        42000000;
        44000000;
        46000000;
        48000000;
        50000000;
        52000000;
        54000000;
        56000000;
        58000000;
        60000000;
        62000000;
        64000000 |];
     [| 0;
        1000000;
        2000000;
        3000000;
        4000000;
        5000000;
        6000000;
        7000000;
        8000000;
        9000000;
        10000000;
        11000000;
        12000000;
        13000000;
        14000000;
        15000000;
        16000000;
        17000000;
        18000000;
        19000000;
        20000000;
        21000000;
        22000000;
        23000000;
        24000000;
        25000000;
        26000000;
        27000000;
        28000000;
        29000000;
        30000000;
        31000000;
        32000000 |];
     [| 0;
        666666;
        1333333;
        2000000;
        2666666;
        3333333;
        4000000;
        4666666;
        5333333;
        6000000;
        6666666;
        7333333;
        8000000;
        8666666;
        9333333;
        10000000;
        10666666;
        11333333;
        12000000;
        12666666;
        13333333;
        14000000;
        14666666;
        15333333;
        16000000;
        16666666;
        17333333;
        18000000;
        18666666;
        19333333;
        20000000;
        20666666;
        21333333 |];
     [| 0;
        500000;
        1000000;
        1500000;
        2000000;
        2500000;
        3000000;
        3500000;
        4000000;
        4500000;
        5000000;
        5500000;
        6000000;
        6500000;
        7000000;
        7500000;
        8000000;
        8500000;
        9000000;
        9500000;
        10000000;
        10500000;
        11000000;
        11500000;
        12000000;
        12500000;
        13000000;
        13500000;
        14000000;
        14500000;
        15000000;
        15500000;
        16000000 |];
     [| 0;
        400000;
        800000;
        1200000;
        1600000;
        2000000;
        2400000;
        2800000;
        3200000;
        3600000;
        4000000;
        4400000;
        4800000;
        5200000;
        5600000;
        6000000;
        6400000;
        6800000;
        7200000;
        7600000;
        8000000;
        8400000;
        8800000;
        9200000;
        9600000;
        10000000;
        10400000;
        10800000;
        11200000;
        11600000;
        12000000;
        12400000;
        12800000 |] |]
