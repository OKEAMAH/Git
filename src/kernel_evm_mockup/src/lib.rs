// SPDX-FileCopyrightText: 2023 Nomadic Labs <contact@nomadic-labs.com>
//
// SPDX-License-Identifier: MIT

use host::rollup_core::RawRollupCore;
use host::runtime::Runtime;

use kernel::kernel_entry;

use crate::account::Account;
use crate::error::Error;
use crate::storage::store_account;
use crate::transactions::{LegacyTransaction, RawTransaction, Transaction1559};
use crate::wei::{from_eth, Wei};

use debug::debug_msg;

mod account;
mod error;
mod storage;
mod transactions;
mod wei;

pub fn init_mock_account<Host: Runtime + RawRollupCore>(host: &mut Host) -> Result<(), Error> {
    let hash = ("6471a723296395cf1dcc568941affd7a390f94ce").to_ascii_lowercase();

    let balance: Wei = from_eth(1000);

    let mock_account = Account::default_account(Vec::from(hash), balance);

    store_account(host, mock_account)
}

// Function only initializing values and testing encodings on constant values.
fn tests<Host: Runtime + RawRollupCore>(host: &mut Host) {
    match init_mock_account(host) {
        Ok(()) => (),
        Err(_) => panic!("The account should be writable"),
    }

    let tx = hex::decode(b"f86b0282520882520894cdac74220da1399a78c3c850d2ca4b24ac4051e188d02ab486cedc00008082f4f6a0a13453b280abf9b60ba3a389650d09b07bf933c9301cc122a89d4af8ea59609fa04ba34e9925c2584124d723dd45820a7eb4144a997267cd55e40f5603094f6f0e").unwrap();
    match RawTransaction::decode(&tx) {
        Ok(RawTransaction::Legacy(_)) => debug_msg!(host; "Decoding succeeded\n"),
        Ok(_) => debug_msg!(host; "Decoding succeeded but didn't return a legacy transaction\n"),
        Err(e) => debug_msg!(host; "Cannot decode legacy transaction: {:?}\n", e),
    }

    let tx_contract = hex::decode(b"f901e804825208832dc6c08080b90198608060405234801561001057600080fd5b50610178806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806354f8a2f214610030575b600080fd5b61003861004e565b60405161004591906100fe565b60405180910390f35b606060405180606001604052806022815260200161012160229139905090565b600081519050919050565b600082825260208201905092915050565b60005b838110156100a857808201518184015260208101905061008d565b60008484015250505050565b6000601f19601f8301169050919050565b60006100d08261006e565b6100da8185610079565b93506100ea81856020860161008a565b6100f3816100b4565b840191505092915050565b6000602082019050818103600083015261011881846100c5565b90509291505056fe48692c20796f757220636f6e74726163742072616e207375636365737366756c6c79a264697066735822122047b8d3300defcba4df6abe78aafe6bd91aaec23eb6c9c7870cd43b36f6a15fb564736f6c634300081100332ea09e47aa4f1cbde333ebc71802d766692d345225236d5c92d219834334d8653845a0552bf240598325f86c854985dc9f4b81696e35948cdfcb62baf0bd3ff6284bb3").unwrap();
    match RawTransaction::decode(&tx_contract) {
        Ok(RawTransaction::Legacy(LegacyTransaction {
            destination: None, ..
        })) => {
            debug_msg!(host; "Decoding contract creation succeeded\n")
        }
        Ok(RawTransaction::Legacy(_)) => {
            debug_msg!(host; "Decoding contract creation succeeded but the destination is not empty\n")
        }
        Ok(_) => debug_msg!(host; "Decoding succeeded but didn't return an EIP1559 transaction\n"),
        Err(e) => debug_msg!(host; "Cannot decode contract creation: {:?}\n", e),
    }

    let tx_1559 = hex::decode(b"02f8750583751c48849502f90085595604a83282ea60945f5e5f3aea4f14906eeeedb8a89d641f5dfbab1b87b1a2bc2ec5000080c080a0422670cfae57b25d7241aa05db4688a82a526b36ee6dfd11380ff428f22b13e5a02fff006885e800eaa49ab1375178cd2877768142a4eeb0f19c9728b802778897").unwrap();
    match RawTransaction::decode(&tx_1559) {
        Ok(RawTransaction::Eip1559(_)) => debug_msg!(host; "Decoding EIP1559 succeeded\n"),
        Ok(_) => debug_msg!(host; "Decoding succeeded but didn't return an EIP1559 transaction\n"),
        Err(e) => debug_msg!(host; "Cannot decode eip1559 transaction: {:?}\n", e),
    }

    let tx_1559_contract = hex::decode(b"02f9047905808459682f0085149d910dff830464af8080b9041f608060405234801561001057600080fd5b5060408051808201825260098152684d6f6e73746572323360b81b602080830191909152825180840190935260078352664d4e535452323360c81b908301529061007b60017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd6101ef565b6000805160206103ff8339815191521461009757610097610216565b73b08aa31cc2b8c0582be42d38bb643292e0a4b9eb6100d06000805160206103ff83398151915260001b6101ec60201b6100ce1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905560405160009073b08aa31cc2b8c0582be42d38bb643292e0a4b9eb9061011a908590859060240161027c565b60408051601f198184030181529181526020820180516001600160e01b031663266c45bb60e11b1790525161014f91906102aa565b600060405180830381855af49150503d806000811461018a576040519150601f19603f3d011682016040523d82523d6000602084013e61018f565b606091505b50509050806101e45760405162461bcd60e51b815260206004820152601560248201527f496e697469616c697a6174696f6e206661696c65640000000000000000000000604482015260640160405180910390fd5b5050506102c6565b90565b8181038181111561021057634e487b7160e01b600052601160045260246000fd5b92915050565b634e487b7160e01b600052600160045260246000fd5b60005b8381101561024757818101518382015260200161022f565b50506000910152565b6000815180845261026881602086016020860161022c565b601f01601f19169290920160200192915050565b60408152600061028f6040830185610250565b82810360208401526102a18185610250565b95945050505050565b600082516102bc81846020870161022c565b9190910192915050565b61012a806102d56000396000f3fe608060405260043610601f5760003560e01c80635c60da1b14603157602b565b36602b576029605f565b005b6029605f565b348015603c57600080fd5b5060436097565b6040516001600160a01b03909116815260200160405180910390f35b609560917f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b60d1565b565b600060c97f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b90565b3660008037600080366000845af43d6000803e80801560ef573d6000f35b3d6000fdfea2646970667358221220ee1f4f98cdb35863fdfa173e5996130b3c10ad53c1357860a72d6817465abad864736f6c63430008110033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbcc080a0f8cce5bb415146f3e318faabdae072e75b4906e0ff9d13cd4ee38bdad0192041a028c38e0256ea1aac63732b84f01b28b515fc6a515e11cbd94fcdbfad97e9611d").unwrap();
    match RawTransaction::decode(&tx_1559_contract) {
        Ok(RawTransaction::Eip1559(Transaction1559 {
            destination: None, ..
        })) => {
            debug_msg!(host; "Decoding EIP1559 contract creation succeeded\n")
        }
        Ok(RawTransaction::Eip1559(_)) => {
            debug_msg!(host; "Decoding EIP1559 contract creation succeeded but the destination is not empty\n")
        }
        Ok(_) => debug_msg!(host; "Decoding succeeded but didn't return an EIP1559 transaction\n"),
        Err(e) => debug_msg!(host; "Cannot decode eip1559 contract creation: {:?}\n", e),
    }
}

pub fn main<Host: Runtime + RawRollupCore>(host: &mut Host) {
    tests(host)
}

kernel_entry!(main);
