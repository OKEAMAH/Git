# This contract manages a shielded pool with a 1 to 1 conversion with respect to
# the tez, updated by a sapling transaction. The second parameter is an optional
# implicit account used to claim funds when unshielding.
storage sapling_state;
parameter (pair sapling_transaction (option key_hash) );
code { # Stack manipulation
       UNPAIR;
       UNPAIR;
       DIP { SWAP };
       # We verify the transaction and update the storage if the transaction is
       # valid. The shielded transactions are handled here.
       # The new state is pushed on top of the stack in addition to the balance
       # of the transaction. If the rest of the script goes well, this state
       # will be the new state of the smart contract.
       SAPLING_VERIFY_UPDATE;
       # In the case of an invalid transaction, we stop.
       ASSERT_SOME;
       UNPAIR;
       # Convert the balance in mutez, keeping the signed
       # balance on top of the stack and the balance in mutez as the second
       # element
       DUP;
       DIP { ABS; # in case of negative balance i.e. shielding
             PUSH mutez 1;
             MUL };
       # We have three cases now: unshielding, shielding and transfers.
       # If the balance is strictly positive (i.e. unshielding), we send funds
       # to the given address.
       # If no address is given (see ASSERT_SOME), we stop
       IFGT {
              DIP { SWAP;
                    ASSERT_SOME;
                    IMPLICIT_ACCOUNT };
              UNIT;
              TRANSFER_TOKENS;
              # Stack manipulation to order. The operations will consist of the
              # TRANSFER_TOKEN operation.
              NIL operation;
              SWAP;
              CONS;
            }
            # If the balance is negative or 0 (i.e. shielding or transfer),
            # we verify the amount transferred in the transaction is exactly the
            # balance of the verify_update output. It does enforce the conversion
            # 1-1 between tez and shielded token.
            # No operation is executed.
            {
              AMOUNT;
              SUB;
              PUSH mutez 0;
              ASSERT_CMPEQ;
              # As we transfer or shield token, an implicit account is not
              # required. It is a good practice to verify.
              # If an implicit account has been given, it might be an invalid
              # operation or a call error.
              DIP { ASSERT_NONE;};
              NIL operation};
       PAIR}